<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gtk" version="3.0"/>
  <package name="gdk-pixbuf-2.0"/>
  <package name="gio-2.0"/>
  <package name="glib-2.0"/>
  <package name="gobject-2.0"/>
  <package name="gtk+-3.0"/>
  <c:include name="libmate-desktop/mate-aboutdialog.h"/>
  <c:include name="libmate-desktop/mate-bg-crossfade.h"/>
  <c:include name="libmate-desktop/mate-bg.h"/>
  <c:include name="libmate-desktop/mate-colorbutton.h"/>
  <c:include name="libmate-desktop/mate-colorsel.h"/>
  <c:include name="libmate-desktop/mate-colorseldialog.h"/>
  <c:include name="libmate-desktop/mate-dconf.h"/>
  <c:include name="libmate-desktop/mate-desktop-item.h"/>
  <c:include name="libmate-desktop/mate-desktop-thumbnail.h"/>
  <c:include name="libmate-desktop/mate-desktop-utils.h"/>
  <c:include name="libmate-desktop/mate-desktop.h"/>
  <c:include name="libmate-desktop/mate-gsettings.h"/>
  <c:include name="libmate-desktop/mate-rr-config.h"/>
  <c:include name="libmate-desktop/mate-rr-labeler.h"/>
  <c:include name="libmate-desktop/mate-rr.h"/>
  <namespace name="MateDesktop"
             version="2.0"
             shared-library="libmate-desktop-2.so.17"
             c:identifier-prefixes="Mate"
             c:symbol-prefixes="mate_">
    <class name="AboutDialog"
           c:symbol-prefix="about_dialog"
           c:type="MateAboutDialog"
           parent="Gtk.Dialog"
           glib:type-name="MateAboutDialog"
           glib:get-type="mate_about_dialog_get_type"
           glib:type-struct="AboutDialogClass">
      <doc xml:space="preserve">The &lt;structname&gt;MateAboutDialog&lt;/structname&gt; struct contains
only private fields and should not be directly accessed.</doc>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="mate_about_dialog_new"
                   version="1.9">
        <doc xml:space="preserve">Creates a new #MateAboutDialog.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a newly created #MateAboutDialog</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_artists"
              c:identifier="mate_about_dialog_get_artists"
              version="1.9">
        <doc xml:space="preserve">Returns the string which are displayed in the artists tab
of the secondary credits dialog.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A
 %NULL-terminated string array containing the artists. The array is
 owned by the about dialog and must not be modified.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="about" transfer-ownership="none">
            <doc xml:space="preserve">a #MateAboutDialog</doc>
            <type name="AboutDialog" c:type="MateAboutDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_authors"
              c:identifier="mate_about_dialog_get_authors"
              version="1.9">
        <doc xml:space="preserve">Returns the string which are displayed in the authors tab
of the secondary credits dialog.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A
 %NULL-terminated string array containing the authors. The array is
 owned by the about dialog and must not be modified.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="about" transfer-ownership="none">
            <doc xml:space="preserve">a #MateAboutDialog</doc>
            <type name="AboutDialog" c:type="MateAboutDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_comments"
              c:identifier="mate_about_dialog_get_comments"
              version="1.9">
        <doc xml:space="preserve">Returns the comments string.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The comments. The string is owned by the about
 dialog and must not be modified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="about" transfer-ownership="none">
            <doc xml:space="preserve">a #MateAboutDialog</doc>
            <type name="AboutDialog" c:type="MateAboutDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_copyright"
              c:identifier="mate_about_dialog_get_copyright"
              version="1.9">
        <doc xml:space="preserve">Returns the copyright string.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The copyright string. The string is owned by the about
 dialog and must not be modified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="about" transfer-ownership="none">
            <doc xml:space="preserve">a #MateAboutDialog</doc>
            <type name="AboutDialog" c:type="MateAboutDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_documenters"
              c:identifier="mate_about_dialog_get_documenters"
              version="1.9">
        <doc xml:space="preserve">Returns the string which are displayed in the documenters
tab of the secondary credits dialog.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A
 %NULL-terminated string array containing the documenters. The
 array is owned by the about dialog and must not be modified.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="about" transfer-ownership="none">
            <doc xml:space="preserve">a #MateAboutDialog</doc>
            <type name="AboutDialog" c:type="MateAboutDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_license"
              c:identifier="mate_about_dialog_get_license"
              version="1.9">
        <doc xml:space="preserve">Returns the license information.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The license information. The string is owned by the about
 dialog and must not be modified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="about" transfer-ownership="none">
            <doc xml:space="preserve">a #MateAboutDialog</doc>
            <type name="AboutDialog" c:type="MateAboutDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_logo"
              c:identifier="mate_about_dialog_get_logo"
              version="1.9">
        <doc xml:space="preserve">Returns the pixbuf displayed as logo in the about dialog.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the pixbuf displayed as logo. The
  pixbuf is owned by the about dialog. If you want to keep a
  reference to it, you have to call g_object_ref() on it.</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="about" transfer-ownership="none">
            <doc xml:space="preserve">a #MateAboutDialog</doc>
            <type name="AboutDialog" c:type="MateAboutDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_logo_icon_name"
              c:identifier="mate_about_dialog_get_logo_icon_name"
              version="1.9">
        <doc xml:space="preserve">Returns the icon name displayed as logo in the about dialog.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the icon name displayed as logo. The string is
  owned by the dialog. If you want to keep a reference
  to it, you have to call g_strdup() on it.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="about" transfer-ownership="none">
            <doc xml:space="preserve">a #MateAboutDialog</doc>
            <type name="AboutDialog" c:type="MateAboutDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_program_name"
              c:identifier="mate_about_dialog_get_program_name"
              version="1.9">
        <doc xml:space="preserve">Returns the program name displayed in the about dialog.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The program name. The string is owned by the about
 dialog and must not be modified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="about" transfer-ownership="none">
            <doc xml:space="preserve">a #MateAboutDialog</doc>
            <type name="AboutDialog" c:type="MateAboutDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_translator_credits"
              c:identifier="mate_about_dialog_get_translator_credits"
              version="1.9">
        <doc xml:space="preserve">Returns the translator credits string which is displayed
in the translators tab of the secondary credits dialog.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The translator credits string. The string is
  owned by the about dialog and must not be modified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="about" transfer-ownership="none">
            <doc xml:space="preserve">a #MateAboutDialog</doc>
            <type name="AboutDialog" c:type="MateAboutDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version"
              c:identifier="mate_about_dialog_get_version"
              version="1.9">
        <doc xml:space="preserve">Returns the version string.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The version string. The string is owned by the about
 dialog and must not be modified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="about" transfer-ownership="none">
            <doc xml:space="preserve">a #MateAboutDialog</doc>
            <type name="AboutDialog" c:type="MateAboutDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_website"
              c:identifier="mate_about_dialog_get_website"
              version="1.9">
        <doc xml:space="preserve">Returns the website URL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The website URL. The string is owned by the about
 dialog and must not be modified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="about" transfer-ownership="none">
            <doc xml:space="preserve">a #MateAboutDialog</doc>
            <type name="AboutDialog" c:type="MateAboutDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_website_label"
              c:identifier="mate_about_dialog_get_website_label"
              version="1.9">
        <doc xml:space="preserve">Returns the label used for the website link.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The label used for the website link. The string is
    owned by the about dialog and must not be modified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="about" transfer-ownership="none">
            <doc xml:space="preserve">a #MateAboutDialog</doc>
            <type name="AboutDialog" c:type="MateAboutDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wrap_license"
              c:identifier="mate_about_dialog_get_wrap_license"
              version="1.9">
        <doc xml:space="preserve">Returns whether the license text in @about is
automatically wrapped.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the license text is wrapped</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="about" transfer-ownership="none">
            <doc xml:space="preserve">a #MateAboutDialog</doc>
            <type name="AboutDialog" c:type="MateAboutDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_artists"
              c:identifier="mate_about_dialog_set_artists"
              version="1.9">
        <doc xml:space="preserve">Sets the strings which are displayed in the artists tab
of the secondary credits dialog.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="about" transfer-ownership="none">
            <doc xml:space="preserve">a #MateAboutDialog</doc>
            <type name="AboutDialog" c:type="MateAboutDialog*"/>
          </instance-parameter>
          <parameter name="artists" transfer-ownership="none">
            <doc xml:space="preserve">a %NULL-terminated array of strings</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_authors"
              c:identifier="mate_about_dialog_set_authors"
              version="1.9">
        <doc xml:space="preserve">Sets the strings which are displayed in the authors tab
of the secondary credits dialog.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="about" transfer-ownership="none">
            <doc xml:space="preserve">a #MateAboutDialog</doc>
            <type name="AboutDialog" c:type="MateAboutDialog*"/>
          </instance-parameter>
          <parameter name="authors" transfer-ownership="none">
            <doc xml:space="preserve">a %NULL-terminated array of strings</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_comments"
              c:identifier="mate_about_dialog_set_comments"
              version="1.9">
        <doc xml:space="preserve">Sets the comments string to display in the about dialog.
This should be a short string of one or two lines.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="about" transfer-ownership="none">
            <doc xml:space="preserve">a #MateAboutDialog</doc>
            <type name="AboutDialog" c:type="MateAboutDialog*"/>
          </instance-parameter>
          <parameter name="comments"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a comments string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_copyright"
              c:identifier="mate_about_dialog_set_copyright"
              version="1.9">
        <doc xml:space="preserve">Sets the copyright string to display in the about dialog.
This should be a short string of one or two lines.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="about" transfer-ownership="none">
            <doc xml:space="preserve">a #MateAboutDialog</doc>
            <type name="AboutDialog" c:type="MateAboutDialog*"/>
          </instance-parameter>
          <parameter name="copyright"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the copyright string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_documenters"
              c:identifier="mate_about_dialog_set_documenters"
              version="1.9">
        <doc xml:space="preserve">Sets the strings which are displayed in the documenters tab
of the secondary credits dialog.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="about" transfer-ownership="none">
            <doc xml:space="preserve">a #MateAboutDialog</doc>
            <type name="AboutDialog" c:type="MateAboutDialog*"/>
          </instance-parameter>
          <parameter name="documenters" transfer-ownership="none">
            <doc xml:space="preserve">a %NULL-terminated array of strings</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_license"
              c:identifier="mate_about_dialog_set_license"
              version="1.9">
        <doc xml:space="preserve">Sets the license information to be displayed in the secondary
license dialog. If @license is %NULL, the license button is
hidden.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="about" transfer-ownership="none">
            <doc xml:space="preserve">a #MateAboutDialog</doc>
            <type name="AboutDialog" c:type="MateAboutDialog*"/>
          </instance-parameter>
          <parameter name="license"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the license information or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_logo"
              c:identifier="mate_about_dialog_set_logo"
              version="1.9">
        <doc xml:space="preserve">Sets the pixbuf to be displayed as logo in the about dialog.
If it is %NULL, the default window icon set with
gtk_window_set_default_icon() will be used.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="about" transfer-ownership="none">
            <doc xml:space="preserve">a #MateAboutDialog</doc>
            <type name="AboutDialog" c:type="MateAboutDialog*"/>
          </instance-parameter>
          <parameter name="logo"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GdkPixbuf, or %NULL</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_logo_icon_name"
              c:identifier="mate_about_dialog_set_logo_icon_name"
              version="1.9">
        <doc xml:space="preserve">Sets the pixbuf to be displayed as logo in the about dialog.
If it is %NULL, the default window icon set with
gtk_window_set_default_icon() will be used.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="about" transfer-ownership="none">
            <doc xml:space="preserve">a #MateAboutDialog</doc>
            <type name="AboutDialog" c:type="MateAboutDialog*"/>
          </instance-parameter>
          <parameter name="icon_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">an icon name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_program_name"
              c:identifier="mate_about_dialog_set_program_name"
              version="1.9">
        <doc xml:space="preserve">Sets the name to display in the about dialog.
If this is not set, it defaults to g_get_application_name().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="about" transfer-ownership="none">
            <doc xml:space="preserve">a #MateAboutDialog</doc>
            <type name="AboutDialog" c:type="MateAboutDialog*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">the program name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_translator_credits"
              c:identifier="mate_about_dialog_set_translator_credits"
              version="1.9">
        <doc xml:space="preserve">Sets the translator credits string which is displayed in
the translators tab of the secondary credits dialog.

The intended use for this string is to display the translator
of the language which is currently used in the user interface.
Using gettext(), a simple way to achieve that is to mark the
string for translation:
|[
 mate_about_dialog_set_translator_credits (about, _("translator-credits"));
]|
It is a good idea to use the customary msgid "translator-credits" for this
purpose, since translators will already know the purpose of that msgid, and
since #MateAboutDialog will detect if "translator-credits" is untranslated
and hide the tab.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="about" transfer-ownership="none">
            <doc xml:space="preserve">a #MateAboutDialog</doc>
            <type name="AboutDialog" c:type="MateAboutDialog*"/>
          </instance-parameter>
          <parameter name="translator_credits"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the translator credits</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_version"
              c:identifier="mate_about_dialog_set_version"
              version="1.9">
        <doc xml:space="preserve">Sets the version string to display in the about dialog.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="about" transfer-ownership="none">
            <doc xml:space="preserve">a #MateAboutDialog</doc>
            <type name="AboutDialog" c:type="MateAboutDialog*"/>
          </instance-parameter>
          <parameter name="version"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the version string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_website"
              c:identifier="mate_about_dialog_set_website"
              version="1.9">
        <doc xml:space="preserve">Sets the URL to use for the website link.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="about" transfer-ownership="none">
            <doc xml:space="preserve">a #MateAboutDialog</doc>
            <type name="AboutDialog" c:type="MateAboutDialog*"/>
          </instance-parameter>
          <parameter name="website"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a URL string starting with "http://"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_website_label"
              c:identifier="mate_about_dialog_set_website_label"
              version="1.9">
        <doc xml:space="preserve">Sets the label to be used for the website link.
It defaults to the website URL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="about" transfer-ownership="none">
            <doc xml:space="preserve">a #MateAboutDialog</doc>
            <type name="AboutDialog" c:type="MateAboutDialog*"/>
          </instance-parameter>
          <parameter name="website_label" transfer-ownership="none">
            <doc xml:space="preserve">the label used for the website link</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_wrap_license"
              c:identifier="mate_about_dialog_set_wrap_license"
              version="1.9">
        <doc xml:space="preserve">Sets whether the license text in @about is
automatically wrapped.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="about" transfer-ownership="none">
            <doc xml:space="preserve">a #MateAboutDialog</doc>
            <type name="AboutDialog" c:type="MateAboutDialog*"/>
          </instance-parameter>
          <parameter name="wrap_license" transfer-ownership="none">
            <doc xml:space="preserve">whether to wrap the license</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="artists"
                version="1.9"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The people who contributed artwork to the program, as a %NULL-terminated
array of strings. Each string may contain email addresses and URLs, which
will be displayed as links, see the introduction for more details.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="authors"
                version="1.9"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The authors of the program, as a %NULL-terminated array of strings.
Each string may contain email addresses and URLs, which will be displayed
as links, see the introduction for more details.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="comments"
                version="1.9"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Comments about the program. This string is displayed in a label
in the main dialog, thus it should be a short explanation of
the main purpose of the program, not a detailed list of features.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="copyright"
                version="1.9"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Copyright information for the program.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="documenters"
                version="1.9"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The people documenting the program, as a %NULL-terminated array of strings.
Each string may contain email addresses and URLs, which will be displayed
as links, see the introduction for more details.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="license"
                version="1.9"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The license of the program. This string is displayed in a
text view in a secondary dialog, therefore it is fine to use
a long multi-paragraph text. Note that the text is only wrapped
in the text view if the "wrap-license" property is set to %TRUE;
otherwise the text itself must contain the intended linebreaks.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="logo"
                version="1.9"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A logo for the about box. If this is not set, it defaults to
gtk_window_get_default_icon_list().</doc>
        <type name="GdkPixbuf.Pixbuf"/>
      </property>
      <property name="logo-icon-name"
                version="1.9"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">A named icon to use as the logo for the about box. This property
overrides the #MateAboutDialog:logo property.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="program-name"
                version="1.9"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The name of the program.
If this is not set, it defaults to g_get_application_name().</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="translator-credits"
                version="1.9"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Credits to the translators. This string should be marked as translatable.
The string may contain email addresses and URLs, which will be displayed
as links, see the introduction for more details.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="version"
                version="1.9"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The version of the program.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="website"
                version="1.9"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The URL for the link to the website of the program.
This should be a string starting with "http://.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="website-label"
                version="1.9"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The label for the link to the website of the program. If this is not set,
it defaults to the URL specified in the #MateAboutDialog:website property.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="wrap-license"
                version="1.9"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Whether to wrap the text in the license dialog.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Dialog" c:type="GtkDialog"/>
      </field>
      <field name="private_data" readable="0" private="1">
        <type name="AboutDialogPrivate" c:type="MateAboutDialogPrivate*"/>
      </field>
    </class>
    <record name="AboutDialogClass"
            c:type="MateAboutDialogClass"
            glib:is-gtype-struct-for="AboutDialog">
      <field name="parent_class">
        <type name="Gtk.DialogClass" c:type="GtkDialogClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="AboutDialogPrivate"
            c:type="MateAboutDialogPrivate"
            disguised="1">
    </record>
    <class name="BG"
           c:symbol-prefix="bg"
           c:type="MateBG"
           parent="GObject.Object"
           glib:type-name="MateBG"
           glib:get-type="mate_bg_get_type"
           glib:type-struct="BGClass">
      <constructor name="new" c:identifier="mate_bg_new">
        <return-value transfer-ownership="full">
          <type name="BG" c:type="MateBG*"/>
        </return-value>
      </constructor>
      <function name="get_surface_from_root"
                c:identifier="mate_bg_get_surface_from_root">
        <doc xml:space="preserve">This function queries the _XROOTPMAP_ID property from
the root window associated with @screen to determine
the current root window background surface and returns
a copy of it. If the _XROOTPMAP_ID is not set, then
a black surface is returned.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #cairo_surface_t if successful or %NULL</doc>
          <type name="cairo.Surface" c:type="cairo_surface_t*"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkScreen</doc>
            <type name="Gdk.Screen" c:type="GdkScreen*"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_surface_as_root"
                c:identifier="mate_bg_set_surface_as_root">
        <doc xml:space="preserve">Set the root pixmap, and properties pointing to it. We
do this atomically with a server grab to make sure that
we won't leak the pixmap if somebody else it setting
it at the same time. (This assumes that they follow the
same conventions we do).  @surface should come from a call
to mate_bg_create_surface().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">the #GdkScreen to change root background on</doc>
            <type name="Gdk.Screen" c:type="GdkScreen*"/>
          </parameter>
          <parameter name="surface" transfer-ownership="none">
            <doc xml:space="preserve">the #cairo_surface_t to set root background from.
  Must be an xlib surface backing a pixmap.</doc>
            <type name="cairo.Surface" c:type="cairo_surface_t*"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_surface_as_root_with_crossfade"
                c:identifier="mate_bg_set_surface_as_root_with_crossfade">
        <doc xml:space="preserve">Set the root pixmap, and properties pointing to it.
This function differs from mate_bg_set_surface_as_root()
in that it adds a subtle crossfade animation from the
current root pixmap to the new one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #MateBGCrossfade object</doc>
          <type name="BGCrossfade" c:type="MateBGCrossfade*"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">the #GdkScreen to change root background on</doc>
            <type name="Gdk.Screen" c:type="GdkScreen*"/>
          </parameter>
          <parameter name="surface" transfer-ownership="none">
            <doc xml:space="preserve">the cairo xlib surface to set root background from</doc>
            <type name="cairo.Surface" c:type="cairo_surface_t*"/>
          </parameter>
        </parameters>
      </function>
      <method name="changes_with_time"
              c:identifier="mate_bg_changes_with_time">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="MateBG*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="create_frame_thumbnail"
              c:identifier="mate_bg_create_frame_thumbnail">
        <doc xml:space="preserve">Creates a thumbnail for a certain frame, where 'frame' is somewhat
vaguely defined as 'suitable point to show while single-stepping
through the slideshow'.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created thumbnail or
or NULL if frame_num is out of bounds.</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="MateBG*"/>
          </instance-parameter>
          <parameter name="factory" transfer-ownership="none">
            <type name="DesktopThumbnailFactory"
                  c:type="MateDesktopThumbnailFactory*"/>
          </parameter>
          <parameter name="screen" transfer-ownership="none">
            <type name="Gdk.Screen" c:type="GdkScreen*"/>
          </parameter>
          <parameter name="dest_width" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_height" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="frame_num" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_surface" c:identifier="mate_bg_create_surface">
        <doc xml:space="preserve">Create a surface that can be set as background for @window. If @is_root is
TRUE, the surface created will be created by a temporary X server connection
so that if someone calls XKillClient on it, it won't affect the application
who created it.</doc>
        <return-value transfer-ownership="full">
          <type name="cairo.Surface" c:type="cairo_surface_t*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <doc xml:space="preserve">MateBG</doc>
            <type name="BG" c:type="MateBG*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_thumbnail" c:identifier="mate_bg_create_thumbnail">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #GdkPixbuf showing the background as a thumbnail</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="MateBG*"/>
          </instance-parameter>
          <parameter name="factory" transfer-ownership="none">
            <type name="DesktopThumbnailFactory"
                  c:type="MateDesktopThumbnailFactory*"/>
          </parameter>
          <parameter name="screen" transfer-ownership="none">
            <type name="Gdk.Screen" c:type="GdkScreen*"/>
          </parameter>
          <parameter name="dest_width" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_height" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw" c:identifier="mate_bg_draw">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="MateBG*"/>
          </instance-parameter>
          <parameter name="dest" transfer-ownership="none">
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
          <parameter name="screen" transfer-ownership="none">
            <type name="Gdk.Screen" c:type="GdkScreen*"/>
          </parameter>
          <parameter name="is_root" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_color" c:identifier="mate_bg_get_color">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="MateBG*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="BGColorType" c:type="MateBGColorType*"/>
          </parameter>
          <parameter name="primary" transfer-ownership="none">
            <type name="Gdk.RGBA" c:type="GdkRGBA*"/>
          </parameter>
          <parameter name="secondary" transfer-ownership="none">
            <type name="Gdk.RGBA" c:type="GdkRGBA*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_draw_background"
              c:identifier="mate_bg_get_draw_background">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="MateBG*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_filename" c:identifier="mate_bg_get_filename">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="MateBG*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_image_size" c:identifier="mate_bg_get_image_size">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="MateBG*"/>
          </instance-parameter>
          <parameter name="factory" transfer-ownership="none">
            <type name="DesktopThumbnailFactory"
                  c:type="MateDesktopThumbnailFactory*"/>
          </parameter>
          <parameter name="best_width" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="best_height" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_placement" c:identifier="mate_bg_get_placement">
        <return-value transfer-ownership="none">
          <type name="BGPlacement" c:type="MateBGPlacement"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="MateBG*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_multiple_sizes"
              c:identifier="mate_bg_has_multiple_sizes">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="MateBG*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_dark" c:identifier="mate_bg_is_dark">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="MateBG*"/>
          </instance-parameter>
          <parameter name="dest_width" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_height" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_from_gsettings"
              c:identifier="mate_bg_load_from_gsettings">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="MateBG*"/>
          </instance-parameter>
          <parameter name="settings" transfer-ownership="none">
            <type name="Gio.Settings" c:type="GSettings*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_from_preferences"
              c:identifier="mate_bg_load_from_preferences">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="MateBG*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_from_system_gsettings"
              c:identifier="mate_bg_load_from_system_gsettings">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="MateBG*"/>
          </instance-parameter>
          <parameter name="settings" transfer-ownership="none">
            <type name="Gio.Settings" c:type="GSettings*"/>
          </parameter>
          <parameter name="reset_apply" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_from_system_preferences"
              c:identifier="mate_bg_load_from_system_preferences">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="MateBG*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save_to_gsettings"
              c:identifier="mate_bg_save_to_gsettings">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="MateBG*"/>
          </instance-parameter>
          <parameter name="settings" transfer-ownership="none">
            <type name="Gio.Settings" c:type="GSettings*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_preferences"
              c:identifier="mate_bg_save_to_preferences">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="MateBG*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_color" c:identifier="mate_bg_set_color">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="MateBG*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="BGColorType" c:type="MateBGColorType"/>
          </parameter>
          <parameter name="primary" transfer-ownership="none">
            <type name="Gdk.RGBA" c:type="GdkRGBA*"/>
          </parameter>
          <parameter name="secondary" transfer-ownership="none">
            <type name="Gdk.RGBA" c:type="GdkRGBA*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_draw_background"
              c:identifier="mate_bg_set_draw_background">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="MateBG*"/>
          </instance-parameter>
          <parameter name="draw_background" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_filename" c:identifier="mate_bg_set_filename">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="MateBG*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_placement" c:identifier="mate_bg_set_placement">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bg" transfer-ownership="none">
            <type name="BG" c:type="MateBG*"/>
          </instance-parameter>
          <parameter name="placement" transfer-ownership="none">
            <type name="BGPlacement" c:type="MateBGPlacement"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="transitioned" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="BGClass"
            c:type="MateBGClass"
            disguised="1"
            glib:is-gtype-struct-for="BG">
    </record>
    <enumeration name="BGColorType" c:type="MateBGColorType">
      <member name="solid" value="0" c:identifier="MATE_BG_COLOR_SOLID">
      </member>
      <member name="h_gradient"
              value="1"
              c:identifier="MATE_BG_COLOR_H_GRADIENT">
      </member>
      <member name="v_gradient"
              value="2"
              c:identifier="MATE_BG_COLOR_V_GRADIENT">
      </member>
    </enumeration>
    <class name="BGCrossfade"
           c:symbol-prefix="bg_crossfade"
           c:type="MateBGCrossfade"
           parent="GObject.Object"
           glib:type-name="MateBGCrossfade"
           glib:get-type="mate_bg_crossfade_get_type"
           glib:type-struct="BGCrossfadeClass">
      <constructor name="new" c:identifier="mate_bg_crossfade_new">
        <doc xml:space="preserve">Creates a new object to manage crossfading a
window background between two #cairo_surface_ts.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the new #MateBGCrossfade</doc>
          <type name="BGCrossfade" c:type="MateBGCrossfade*"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve">The width of the crossfading window</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve">The height of the crossfading window</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="finished">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fade" transfer-ownership="none">
            <type name="BGCrossfade" c:type="MateBGCrossfade*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="is_started" c:identifier="mate_bg_crossfade_is_started">
        <doc xml:space="preserve">This function reveals whether or not @fade is currently
running on a window.  See mate_bg_crossfade_start() for
information on how to initiate a crossfade.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if fading, or %FALSE if not fading</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fade" transfer-ownership="none">
            <doc xml:space="preserve">a #MateBGCrossfade</doc>
            <type name="BGCrossfade" c:type="MateBGCrossfade*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_end_surface"
              c:identifier="mate_bg_crossfade_set_end_surface">
        <doc xml:space="preserve">Before initiating a crossfade with mate_bg_crossfade_start()
a start and end surface have to be set.  This function sets
the surface shown at the end of the crossfade effect.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful, or %FALSE if the surface
could not be copied.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fade" transfer-ownership="none">
            <doc xml:space="preserve">a #MateBGCrossfade</doc>
            <type name="BGCrossfade" c:type="MateBGCrossfade*"/>
          </instance-parameter>
          <parameter name="surface" transfer-ownership="none">
            <doc xml:space="preserve">The cairo surface to fade to</doc>
            <type name="cairo.Surface" c:type="cairo_surface_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_start_surface"
              c:identifier="mate_bg_crossfade_set_start_surface">
        <doc xml:space="preserve">Before initiating a crossfade with mate_bg_crossfade_start()
a start and end surface have to be set.  This function sets
the surface shown at the beginning of the crossfade effect.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful, or %FALSE if the surface
could not be copied.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fade" transfer-ownership="none">
            <doc xml:space="preserve">a #MateBGCrossfade</doc>
            <type name="BGCrossfade" c:type="MateBGCrossfade*"/>
          </instance-parameter>
          <parameter name="surface" transfer-ownership="none">
            <doc xml:space="preserve">The cairo surface to fade from</doc>
            <type name="cairo.Surface" c:type="cairo_surface_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start" c:identifier="mate_bg_crossfade_start">
        <doc xml:space="preserve">This function initiates a quick crossfade between two surfaces on
the background of @window. Before initiating the crossfade both
mate_bg_crossfade_set_start_surface() and
mate_bg_crossfade_set_end_surface() need to be called. If animations
are disabled, the crossfade is skipped, and the window background is
set immediately to the end surface.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fade" transfer-ownership="none">
            <doc xml:space="preserve">a #MateBGCrossfade</doc>
            <type name="BGCrossfade" c:type="MateBGCrossfade*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">The #GdkWindow to draw crossfade on</doc>
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_widget"
              c:identifier="mate_bg_crossfade_start_widget">
        <doc xml:space="preserve">This function initiates a quick crossfade between two surfaces on
the background of @widget. Before initiating the crossfade both
mate_bg_crossfade_set_start_surface() and
mate_bg_crossfade_set_end_surface() need to be called. If animations
are disabled, the crossfade is skipped, and the window background is
set immediately to the end surface.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fade" transfer-ownership="none">
            <doc xml:space="preserve">a #MateBGCrossfade</doc>
            <type name="BGCrossfade" c:type="MateBGCrossfade*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve">The #GtkWidget to draw crossfade on</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="stop" c:identifier="mate_bg_crossfade_stop">
        <doc xml:space="preserve">This function stops any in progress crossfades that may be
happening.  It's harmless to call this function if @fade is
already stopped.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fade" transfer-ownership="none">
            <doc xml:space="preserve">a #MateBGCrossfade</doc>
            <type name="BGCrossfade" c:type="MateBGCrossfade*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="height"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">When a crossfade is running, this is height of the fading
surface.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="width"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">When a crossfade is running, this is width of the fading
surface.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent_object">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="BGCrossfadePrivate" c:type="MateBGCrossfadePrivate*"/>
      </field>
      <glib:signal name="finished" when="last">
        <doc xml:space="preserve">When a crossfade finishes, @window will have a copy
of the end surface as its background, and this signal will
get emitted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">the #GdkWindow the crossfade happend on.</doc>
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="BGCrossfadeClass"
            c:type="MateBGCrossfadeClass"
            glib:is-gtype-struct-for="BGCrossfade">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="finished">
        <callback name="finished">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="fade" transfer-ownership="none">
              <type name="BGCrossfade" c:type="MateBGCrossfade*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Gdk.Window" c:type="GdkWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="BGCrossfadePrivate"
            c:type="MateBGCrossfadePrivate"
            disguised="1">
    </record>
    <enumeration name="BGPlacement" c:type="MateBGPlacement">
      <member name="tiled" value="0" c:identifier="MATE_BG_PLACEMENT_TILED">
      </member>
      <member name="zoomed" value="1" c:identifier="MATE_BG_PLACEMENT_ZOOMED">
      </member>
      <member name="centered"
              value="2"
              c:identifier="MATE_BG_PLACEMENT_CENTERED">
      </member>
      <member name="scaled" value="3" c:identifier="MATE_BG_PLACEMENT_SCALED">
      </member>
      <member name="fill_screen"
              value="4"
              c:identifier="MATE_BG_PLACEMENT_FILL_SCREEN">
      </member>
      <member name="spanned"
              value="5"
              c:identifier="MATE_BG_PLACEMENT_SPANNED">
      </member>
    </enumeration>
    <constant name="BG_KEY_BACKGROUND_FADE"
              value="background-fade"
              c:type="MATE_BG_KEY_BACKGROUND_FADE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="BG_KEY_COLOR_TYPE"
              value="color-shading-type"
              c:type="MATE_BG_KEY_COLOR_TYPE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="BG_KEY_DRAW_BACKGROUND"
              value="draw-background"
              c:type="MATE_BG_KEY_DRAW_BACKGROUND">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="BG_KEY_PICTURE_FILENAME"
              value="picture-filename"
              c:type="MATE_BG_KEY_PICTURE_FILENAME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="BG_KEY_PICTURE_OPACITY"
              value="picture-opacity"
              c:type="MATE_BG_KEY_PICTURE_OPACITY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="BG_KEY_PICTURE_PLACEMENT"
              value="picture-options"
              c:type="MATE_BG_KEY_PICTURE_PLACEMENT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="BG_KEY_PRIMARY_COLOR"
              value="primary-color"
              c:type="MATE_BG_KEY_PRIMARY_COLOR">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="BG_KEY_SECONDARY_COLOR"
              value="secondary-color"
              c:type="MATE_BG_KEY_SECONDARY_COLOR">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="BG_KEY_SHOW_DESKTOP"
              value="show-desktop-icons"
              c:type="MATE_BG_KEY_SHOW_DESKTOP">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="BG_SCHEMA"
              value="org.mate.background"
              c:type="MATE_BG_SCHEMA">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="ColorButton"
           c:symbol-prefix="color_button"
           c:type="MateColorButton"
           parent="Gtk.Button"
           glib:type-name="MateColorButton"
           glib:get-type="mate_color_button_get_type"
           glib:type-struct="ColorButtonClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Activatable"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="mate_color_button_new"
                   version="1.9.1">
        <doc xml:space="preserve">Creates a new color button. This returns a widget in the form of
a small button containing a swatch representing the current selected
color. When the button is clicked, a color-selection dialog will open,
allowing the user to select a color. The swatch will be updated to reflect
the new color when the user finishes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new color button.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_color"
                   c:identifier="mate_color_button_new_with_color"
                   version="1.9.1">
        <doc xml:space="preserve">Creates a new color button.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new color button.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve">A #GdkColor to set the current color with.</doc>
            <type name="Gdk.Color" c:type="const GdkColor*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="color_set">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cp" transfer-ownership="none">
            <type name="ColorButton" c:type="MateColorButton*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_alpha"
              c:identifier="mate_color_button_get_alpha"
              version="1.9.1">
        <doc xml:space="preserve">Returns the current alpha value.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an integer between 0 and 65535.</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="color_button" transfer-ownership="none">
            <doc xml:space="preserve">a #MateColorButton.</doc>
            <type name="ColorButton" c:type="MateColorButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_color"
              c:identifier="mate_color_button_get_color"
              version="1.9.1">
        <doc xml:space="preserve">Sets @color to be the current color in the #MateColorButton widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="color_button" transfer-ownership="none">
            <doc xml:space="preserve">a #MateColorButton.</doc>
            <type name="ColorButton" c:type="MateColorButton*"/>
          </instance-parameter>
          <parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkColor to fill in with the current color.</doc>
            <type name="Gdk.Color" c:type="GdkColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_rgba"
              c:identifier="mate_color_button_get_rgba"
              version="1.9.1">
        <doc xml:space="preserve">Sets @color to be the current color in the #MateColorButton widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="color_button" transfer-ownership="none">
            <doc xml:space="preserve">a #MateColorButton.</doc>
            <type name="ColorButton" c:type="MateColorButton*"/>
          </instance-parameter>
          <parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkRGBA to fill in with the current color.</doc>
            <type name="Gdk.RGBA" c:type="GdkRGBA*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="mate_color_button_get_title"
              version="1.9.1">
        <doc xml:space="preserve">Gets the title of the color selection dialog.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An internal string, do not free the return value</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="color_button" transfer-ownership="none">
            <doc xml:space="preserve">a #MateColorButton</doc>
            <type name="ColorButton" c:type="MateColorButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_alpha"
              c:identifier="mate_color_button_get_use_alpha"
              version="1.9.1">
        <doc xml:space="preserve">Does the color selection dialog use the alpha channel?</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the color sample uses alpha channel, %FALSE if not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="color_button" transfer-ownership="none">
            <doc xml:space="preserve">a #MateColorButton.</doc>
            <type name="ColorButton" c:type="MateColorButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_alpha"
              c:identifier="mate_color_button_set_alpha"
              version="1.9.1">
        <doc xml:space="preserve">Sets the current opacity to be @alpha.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="color_button" transfer-ownership="none">
            <doc xml:space="preserve">a #MateColorButton.</doc>
            <type name="ColorButton" c:type="MateColorButton*"/>
          </instance-parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve">an integer between 0 and 65535.</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_color"
              c:identifier="mate_color_button_set_color"
              version="1.9.1">
        <doc xml:space="preserve">Sets the current color to be @color.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="color_button" transfer-ownership="none">
            <doc xml:space="preserve">a #MateColorButton.</doc>
            <type name="ColorButton" c:type="MateColorButton*"/>
          </instance-parameter>
          <parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve">A #GdkColor to set the current color with.</doc>
            <type name="Gdk.Color" c:type="const GdkColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rgba"
              c:identifier="mate_color_button_set_rgba"
              version="1.9.1">
        <doc xml:space="preserve">Sets the current color to be @color.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="color_button" transfer-ownership="none">
            <doc xml:space="preserve">a #MateColorButton.</doc>
            <type name="ColorButton" c:type="MateColorButton*"/>
          </instance-parameter>
          <parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve">A #GdkRGBA to set the current color with.</doc>
            <type name="Gdk.RGBA" c:type="const GdkRGBA*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="mate_color_button_set_title"
              version="1.9.1">
        <doc xml:space="preserve">Sets the title for the color selection dialog.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="color_button" transfer-ownership="none">
            <doc xml:space="preserve">a #MateColorButton</doc>
            <type name="ColorButton" c:type="MateColorButton*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve">String containing new window title.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_alpha"
              c:identifier="mate_color_button_set_use_alpha"
              version="1.9.1">
        <doc xml:space="preserve">Sets whether or not the color button should use the alpha channel.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="color_button" transfer-ownership="none">
            <doc xml:space="preserve">a #MateColorButton.</doc>
            <type name="ColorButton" c:type="MateColorButton*"/>
          </instance-parameter>
          <parameter name="use_alpha" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if color button should use alpha channel, %FALSE if not.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="alpha"
                version="1.9.1"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The selected opacity value (0 fully transparent, 65535 fully opaque).</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="color"
                version="1.9.1"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The selected color.</doc>
        <type name="Gdk.Color"/>
      </property>
      <property name="title"
                version="1.9.1"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The title of the color selection dialog</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="use-alpha"
                version="1.9.1"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">If this property is set to %TRUE, the color swatch on the button is rendered against a
checkerboard background to show its opacity and the opacity slider is displayed in the
color selection dialog.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="button">
        <type name="Gtk.Button" c:type="GtkButton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ColorButtonPrivate" c:type="MateColorButtonPrivate*"/>
      </field>
      <glib:signal name="color-set" when="first" version="1.9.1">
        <doc xml:space="preserve">The ::color-set signal is emitted when the user selects a color.
When handling this signal, use mate_color_button_get_color() and
mate_color_button_get_alpha() to find out which color was just selected.

Note that this signal is only emitted when the &lt;emphasis&gt;user&lt;/emphasis&gt;
changes the color. If you need to react to programmatic color changes
as well, use the notify::color signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ColorButtonClass"
            c:type="MateColorButtonClass"
            glib:is-gtype-struct-for="ColorButton">
      <field name="parent_class">
        <type name="Gtk.ButtonClass" c:type="GtkButtonClass"/>
      </field>
      <field name="color_set">
        <callback name="color_set">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cp" transfer-ownership="none">
              <type name="ColorButton" c:type="MateColorButton*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ColorButtonPrivate"
            c:type="MateColorButtonPrivate"
            disguised="1">
    </record>
    <class name="ColorSelection"
           c:symbol-prefix="color_selection"
           c:type="MateColorSelection"
           parent="Gtk.Box"
           glib:type-name="MateColorSelection"
           glib:get-type="mate_color_selection_get_type"
           glib:type-struct="ColorSelectionClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="mate_color_selection_new">
        <doc xml:space="preserve">Creates a new MateColorSelection.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #MateColorSelection</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <function name="palette_from_string"
                c:identifier="mate_color_selection_palette_from_string">
        <doc xml:space="preserve">Parses a color palette string; the string is a colon-separated
list of color names readable by gdk_color_parse().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if a palette was successfully parsed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">a string encoding a color palette.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="colors"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">return location for allocated
         array of #GdkColor.</doc>
            <array length="2" zero-terminated="0" c:type="GdkColor**">
              <type name="Gdk.Color" c:type="GdkColor*"/>
            </array>
          </parameter>
          <parameter name="n_colors"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">return location for length of array.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </function>
      <function name="palette_to_string"
                c:identifier="mate_color_selection_palette_to_string">
        <doc xml:space="preserve">Encodes a palette as a string, useful for persistent storage.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">allocated string encoding the palette.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="colors" transfer-ownership="none">
            <doc xml:space="preserve">an array of colors.</doc>
            <array length="1" zero-terminated="0" c:type="GdkColor*">
              <type name="Gdk.Color" c:type="GdkColor"/>
            </array>
          </parameter>
          <parameter name="n_colors" transfer-ownership="none">
            <doc xml:space="preserve">length of the array.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_change_palette_hook"
                c:identifier="mate_color_selection_set_change_palette_hook"
                introspectable="0"
                deprecated="1"
                deprecated-version="2.4">
        <doc xml:space="preserve">Installs a global function to be called whenever the user tries to
modify the palette in a color selection. This function should save
the new palette contents, and update the GtkSettings property
"gtk-color-palette" so all MateColorSelection widgets will be modified.</doc>
        <doc-deprecated xml:space="preserve">This function does not work in multihead environments.
    Use mate_color_selection_set_change_palette_with_screen_hook() instead.</doc-deprecated>
        <return-value>
          <doc xml:space="preserve">the previous change palette hook (that was replaced).</doc>
          <type name="ColorSelectionChangePaletteFunc"
                c:type="MateColorSelectionChangePaletteFunc"/>
        </return-value>
        <parameters>
          <parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">a function to call when the custom palette needs saving.</doc>
            <type name="ColorSelectionChangePaletteFunc"
                  c:type="MateColorSelectionChangePaletteFunc"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_change_palette_with_screen_hook"
                c:identifier="mate_color_selection_set_change_palette_with_screen_hook"
                version="1.9.1"
                introspectable="0">
        <doc xml:space="preserve">Installs a global function to be called whenever the user tries to
modify the palette in a color selection. This function should save
the new palette contents, and update the GtkSettings property
"gtk-color-palette" so all MateColorSelection widgets will be modified.</doc>
        <return-value>
          <doc xml:space="preserve">the previous change palette hook (that was replaced).</doc>
          <type name="ColorSelectionChangePaletteWithScreenFunc"
                c:type="MateColorSelectionChangePaletteWithScreenFunc"/>
        </return-value>
        <parameters>
          <parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve">a function to call when the custom palette needs saving.</doc>
            <type name="ColorSelectionChangePaletteWithScreenFunc"
                  c:type="MateColorSelectionChangePaletteWithScreenFunc"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="color_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="color_selection" transfer-ownership="none">
            <type name="ColorSelection" c:type="MateColorSelection*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_color"
              c:identifier="mate_color_selection_get_color"
              deprecated="1"
              deprecated-version="2.0">
        <doc xml:space="preserve">Sets @color to be the current color in the MateColorSelection widget.</doc>
        <doc-deprecated xml:space="preserve">Use mate_color_selection_get_current_color() instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="colorsel" transfer-ownership="none">
            <doc xml:space="preserve">a #MateColorSelection.</doc>
            <type name="ColorSelection" c:type="MateColorSelection*"/>
          </instance-parameter>
          <parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve">an array of 4 #gdouble to fill in with the current color.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_current_alpha"
              c:identifier="mate_color_selection_get_current_alpha">
        <doc xml:space="preserve">Returns the current alpha value.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an integer between 0 and 65535.</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="colorsel" transfer-ownership="none">
            <doc xml:space="preserve">a #MateColorSelection.</doc>
            <type name="ColorSelection" c:type="MateColorSelection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_color"
              c:identifier="mate_color_selection_get_current_color">
        <doc xml:space="preserve">Sets @color to be the current color in the MateColorSelection widget.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="colorsel" transfer-ownership="none">
            <doc xml:space="preserve">a #MateColorSelection.</doc>
            <type name="ColorSelection" c:type="MateColorSelection*"/>
          </instance-parameter>
          <parameter name="color"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">a #GdkColor to fill in with the current color.</doc>
            <type name="Gdk.Color" c:type="GdkColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_has_opacity_control"
              c:identifier="mate_color_selection_get_has_opacity_control">
        <doc xml:space="preserve">Determines whether the colorsel has an opacity control.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the @colorsel has an opacity control.  %FALSE if it does't.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="colorsel" transfer-ownership="none">
            <doc xml:space="preserve">a #MateColorSelection.</doc>
            <type name="ColorSelection" c:type="MateColorSelection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_has_palette"
              c:identifier="mate_color_selection_get_has_palette">
        <doc xml:space="preserve">Determines whether the color selector has a color palette.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the selector has a palette.  %FALSE if it hasn't.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="colorsel" transfer-ownership="none">
            <doc xml:space="preserve">a #MateColorSelection.</doc>
            <type name="ColorSelection" c:type="MateColorSelection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_previous_alpha"
              c:identifier="mate_color_selection_get_previous_alpha">
        <doc xml:space="preserve">Returns the previous alpha value.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an integer between 0 and 65535.</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="colorsel" transfer-ownership="none">
            <doc xml:space="preserve">a #MateColorSelection.</doc>
            <type name="ColorSelection" c:type="MateColorSelection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_previous_color"
              c:identifier="mate_color_selection_get_previous_color">
        <doc xml:space="preserve">Fills @color in with the original color value.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="colorsel" transfer-ownership="none">
            <doc xml:space="preserve">a #MateColorSelection.</doc>
            <type name="ColorSelection" c:type="MateColorSelection*"/>
          </instance-parameter>
          <parameter name="color"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">a #GdkColor to fill in with the original color value.</doc>
            <type name="Gdk.Color" c:type="GdkColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_adjusting"
              c:identifier="mate_color_selection_is_adjusting">
        <doc xml:space="preserve">Gets the current state of the @colorsel.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the user is currently dragging a color around, and %FALSE
if the selection has stopped.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="colorsel" transfer-ownership="none">
            <doc xml:space="preserve">a #MateColorSelection.</doc>
            <type name="ColorSelection" c:type="MateColorSelection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_color"
              c:identifier="mate_color_selection_set_color"
              deprecated="1"
              deprecated-version="2.0">
        <doc xml:space="preserve">Sets the current color to be @color.  The first time this is called, it will
also set the original color to be @color too.</doc>
        <doc-deprecated xml:space="preserve">Use mate_color_selection_set_current_color() instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="colorsel" transfer-ownership="none">
            <doc xml:space="preserve">a #MateColorSelection.</doc>
            <type name="ColorSelection" c:type="MateColorSelection*"/>
          </instance-parameter>
          <parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve">an array of 4 doubles specifying the red, green, blue and opacity
  to set the current color to.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current_alpha"
              c:identifier="mate_color_selection_set_current_alpha">
        <doc xml:space="preserve">Sets the current opacity to be @alpha.  The first time this is called, it will
also set the original opacity to be @alpha too.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="colorsel" transfer-ownership="none">
            <doc xml:space="preserve">a #MateColorSelection.</doc>
            <type name="ColorSelection" c:type="MateColorSelection*"/>
          </instance-parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve">an integer between 0 and 65535.</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current_color"
              c:identifier="mate_color_selection_set_current_color">
        <doc xml:space="preserve">Sets the current color to be @color.  The first time this is called, it will
also set the original color to be @color too.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="colorsel" transfer-ownership="none">
            <doc xml:space="preserve">a #MateColorSelection.</doc>
            <type name="ColorSelection" c:type="MateColorSelection*"/>
          </instance-parameter>
          <parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve">A #GdkColor to set the current color with.</doc>
            <type name="Gdk.Color" c:type="const GdkColor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_has_opacity_control"
              c:identifier="mate_color_selection_set_has_opacity_control">
        <doc xml:space="preserve">Sets the @colorsel to use or not use opacity.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="colorsel" transfer-ownership="none">
            <doc xml:space="preserve">a #MateColorSelection.</doc>
            <type name="ColorSelection" c:type="MateColorSelection*"/>
          </instance-parameter>
          <parameter name="has_opacity" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if @colorsel can set the opacity, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_has_palette"
              c:identifier="mate_color_selection_set_has_palette">
        <doc xml:space="preserve">Shows and hides the palette based upon the value of @has_palette.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="colorsel" transfer-ownership="none">
            <doc xml:space="preserve">a #MateColorSelection.</doc>
            <type name="ColorSelection" c:type="MateColorSelection*"/>
          </instance-parameter>
          <parameter name="has_palette" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if palette is to be visible, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_previous_alpha"
              c:identifier="mate_color_selection_set_previous_alpha">
        <doc xml:space="preserve">Sets the 'previous' alpha to be @alpha.  This function should be called with
some hesitations, as it might seem confusing to have that alpha change.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="colorsel" transfer-ownership="none">
            <doc xml:space="preserve">a #MateColorSelection.</doc>
            <type name="ColorSelection" c:type="MateColorSelection*"/>
          </instance-parameter>
          <parameter name="alpha" transfer-ownership="none">
            <doc xml:space="preserve">an integer between 0 and 65535.</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_previous_color"
              c:identifier="mate_color_selection_set_previous_color">
        <doc xml:space="preserve">Sets the 'previous' color to be @color.  This function should be called with
some hesitations, as it might seem confusing to have that color change.
Calling mate_color_selection_set_current_color() will also set this color the first
time it is called.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="colorsel" transfer-ownership="none">
            <doc xml:space="preserve">a #MateColorSelection.</doc>
            <type name="ColorSelection" c:type="MateColorSelection*"/>
          </instance-parameter>
          <parameter name="color" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkColor to set the previous color with.</doc>
            <type name="Gdk.Color" c:type="const GdkColor*"/>
          </parameter>
        </parameters>
      </method>
      <property name="current-alpha" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="current-color" writable="1" transfer-ownership="none">
        <type name="Gdk.Color"/>
      </property>
      <property name="has-opacity-control"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="has-palette" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hex-string" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Box" c:type="GtkBox"/>
      </field>
      <field name="private_data" introspectable="0">
        <type c:type="ColorSelectionPrivate*"/>
      </field>
      <glib:signal name="color-changed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <callback name="ColorSelectionChangePaletteFunc"
              c:type="MateColorSelectionChangePaletteFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="colors" transfer-ownership="none">
          <type name="Gdk.Color" c:type="const GdkColor*"/>
        </parameter>
        <parameter name="n_colors" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ColorSelectionChangePaletteWithScreenFunc"
              c:type="MateColorSelectionChangePaletteWithScreenFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="screen" transfer-ownership="none">
          <type name="Gdk.Screen" c:type="GdkScreen*"/>
        </parameter>
        <parameter name="colors" transfer-ownership="none">
          <type name="Gdk.Color" c:type="const GdkColor*"/>
        </parameter>
        <parameter name="n_colors" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </callback>
    <record name="ColorSelectionClass"
            c:type="MateColorSelectionClass"
            glib:is-gtype-struct-for="ColorSelection">
      <field name="parent_class">
        <type name="Gtk.BoxClass" c:type="GtkBoxClass"/>
      </field>
      <field name="color_changed">
        <callback name="color_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="color_selection" transfer-ownership="none">
              <type name="ColorSelection" c:type="MateColorSelection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="ColorSelectionDialog"
           c:symbol-prefix="color_selection_dialog"
           c:type="MateColorSelectionDialog"
           parent="Gtk.Dialog"
           glib:type-name="MateColorSelectionDialog"
           glib:get-type="mate_color_selection_dialog_get_type"
           glib:type-struct="ColorSelectionDialogClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="mate_color_selection_dialog_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_color_selection"
              c:identifier="mate_color_selection_dialog_get_color_selection"
              version="1.9.1">
        <doc xml:space="preserve">Retrieves the #MateColorSelection widget embedded in the dialog.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the embedded #MateColorSelection</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="colorsel" transfer-ownership="none">
            <doc xml:space="preserve">a #MateColorSelectionDialog</doc>
            <type name="ColorSelectionDialog"
                  c:type="MateColorSelectionDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="cancel-button" transfer-ownership="none">
        <type name="Gtk.Widget"/>
      </property>
      <property name="color-selection" transfer-ownership="none">
        <type name="Gtk.Widget"/>
      </property>
      <property name="help-button" transfer-ownership="none">
        <type name="Gtk.Widget"/>
      </property>
      <property name="ok-button" transfer-ownership="none">
        <type name="Gtk.Widget"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Dialog" c:type="GtkDialog"/>
      </field>
      <field name="colorsel">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
      <field name="ok_button">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
      <field name="cancel_button">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
      <field name="help_button">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </field>
    </class>
    <record name="ColorSelectionDialogClass"
            c:type="MateColorSelectionDialogClass"
            glib:is-gtype-struct-for="ColorSelectionDialog">
      <field name="parent_class">
        <type name="Gtk.DialogClass" c:type="GtkDialogClass"/>
      </field>
      <field name="_gtk_reserved1" introspectable="0">
        <callback name="_gtk_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved2" introspectable="0">
        <callback name="_gtk_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved3" introspectable="0">
        <callback name="_gtk_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gtk_reserved4" introspectable="0">
        <callback name="_gtk_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <constant name="DESKTOP_ITEM_ACTIONS"
              value="Actions"
              c:type="MATE_DESKTOP_ITEM_ACTIONS">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_CATEGORIES"
              value="Categories"
              c:type="MATE_DESKTOP_ITEM_CATEGORIES">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_COMMENT"
              value="Comment"
              c:type="MATE_DESKTOP_ITEM_COMMENT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_DEFAULT_APP"
              value="DefaultApp"
              c:type="MATE_DESKTOP_ITEM_DEFAULT_APP">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_DEV"
              value="Dev"
              c:type="MATE_DESKTOP_ITEM_DEV">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_DOC_PATH"
              value="X-MATE-DocPath"
              c:type="MATE_DESKTOP_ITEM_DOC_PATH">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_ENCODING"
              value="Encoding"
              c:type="MATE_DESKTOP_ITEM_ENCODING">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_EXEC"
              value="Exec"
              c:type="MATE_DESKTOP_ITEM_EXEC">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_FILE_PATTERN"
              value="FilePattern"
              c:type="MATE_DESKTOP_ITEM_FILE_PATTERN">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_FS_TYPE"
              value="FSType"
              c:type="MATE_DESKTOP_ITEM_FS_TYPE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_GENERIC_NAME"
              value="GenericName"
              c:type="MATE_DESKTOP_ITEM_GENERIC_NAME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_HIDDEN"
              value="Hidden"
              c:type="MATE_DESKTOP_ITEM_HIDDEN">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_ICON"
              value="Icon"
              c:type="MATE_DESKTOP_ITEM_ICON">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_MIME_TYPE"
              value="MimeType"
              c:type="MATE_DESKTOP_ITEM_MIME_TYPE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_MINI_ICON"
              value="MiniIcon"
              c:type="MATE_DESKTOP_ITEM_MINI_ICON">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_MOUNT_POINT"
              value="MountPoint"
              c:type="MATE_DESKTOP_ITEM_MOUNT_POINT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_NAME"
              value="Name"
              c:type="MATE_DESKTOP_ITEM_NAME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_NO_DISPLAY"
              value="NoDisplay"
              c:type="MATE_DESKTOP_ITEM_NO_DISPLAY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_ONLY_SHOW_IN"
              value="OnlyShowIn"
              c:type="MATE_DESKTOP_ITEM_ONLY_SHOW_IN">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_PATH"
              value="Path"
              c:type="MATE_DESKTOP_ITEM_PATH">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_PATTERNS"
              value="Patterns"
              c:type="MATE_DESKTOP_ITEM_PATTERNS">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_READ_ONLY"
              value="ReadOnly"
              c:type="MATE_DESKTOP_ITEM_READ_ONLY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_SORT_ORDER"
              value="SortOrder"
              c:type="MATE_DESKTOP_ITEM_SORT_ORDER">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_SWALLOW_EXEC"
              value="SwallowExec"
              c:type="MATE_DESKTOP_ITEM_SWALLOW_EXEC">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_SWALLOW_TITLE"
              value="SwallowTitle"
              c:type="MATE_DESKTOP_ITEM_SWALLOW_TITLE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_TERMINAL"
              value="Terminal"
              c:type="MATE_DESKTOP_ITEM_TERMINAL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_TERMINAL_OPTIONS"
              value="TerminalOptions"
              c:type="MATE_DESKTOP_ITEM_TERMINAL_OPTIONS">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_TRY_EXEC"
              value="TryExec"
              c:type="MATE_DESKTOP_ITEM_TRY_EXEC">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_TYPE"
              value="Type"
              c:type="MATE_DESKTOP_ITEM_TYPE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_UNMOUNT_ICON"
              value="UnmountIcon"
              c:type="MATE_DESKTOP_ITEM_UNMOUNT_ICON">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_URL"
              value="URL"
              c:type="MATE_DESKTOP_ITEM_URL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DESKTOP_ITEM_VERSION"
              value="Version"
              c:type="MATE_DESKTOP_ITEM_VERSION">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <record name="DesktopItem"
            c:type="MateDesktopItem"
            glib:type-name="MateDesktopItem"
            glib:get-type="mate_desktop_item_get_type"
            c:symbol-prefix="desktop_item">
      <constructor name="new" c:identifier="mate_desktop_item_new">
        <return-value transfer-ownership="full">
          <type name="DesktopItem" c:type="MateDesktopItem*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_basename"
                   c:identifier="mate_desktop_item_new_from_basename"
                   throws="1">
        <return-value transfer-ownership="full">
          <type name="DesktopItem" c:type="MateDesktopItem*"/>
        </return-value>
        <parameters>
          <parameter name="basename" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="DesktopItemLoadFlags"
                  c:type="MateDesktopItemLoadFlags"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_file"
                   c:identifier="mate_desktop_item_new_from_file"
                   throws="1">
        <return-value transfer-ownership="full">
          <type name="DesktopItem" c:type="MateDesktopItem*"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="DesktopItemLoadFlags"
                  c:type="MateDesktopItemLoadFlags"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_string"
                   c:identifier="mate_desktop_item_new_from_string"
                   throws="1">
        <return-value transfer-ownership="full">
          <type name="DesktopItem" c:type="MateDesktopItem*"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="string" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <type name="gssize" c:type="gssize"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="DesktopItemLoadFlags"
                  c:type="MateDesktopItemLoadFlags"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_uri"
                   c:identifier="mate_desktop_item_new_from_uri"
                   throws="1">
        <return-value transfer-ownership="full">
          <type name="DesktopItem" c:type="MateDesktopItem*"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="DesktopItemLoadFlags"
                  c:type="MateDesktopItemLoadFlags"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="attr_exists" c:identifier="mate_desktop_item_attr_exists">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="const MateDesktopItem*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_localestring"
              c:identifier="mate_desktop_item_clear_localestring">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="MateDesktopItem*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_section"
              c:identifier="mate_desktop_item_clear_section">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="MateDesktopItem*"/>
          </instance-parameter>
          <parameter name="section" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="mate_desktop_item_copy">
        <return-value transfer-ownership="full">
          <type name="DesktopItem" c:type="MateDesktopItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="const MateDesktopItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="drop_uri_list"
              c:identifier="mate_desktop_item_drop_uri_list"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="const MateDesktopItem*"/>
          </instance-parameter>
          <parameter name="uri_list" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="DesktopItemLaunchFlags"
                  c:type="MateDesktopItemLaunchFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="drop_uri_list_with_env"
              c:identifier="mate_desktop_item_drop_uri_list_with_env"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="const MateDesktopItem*"/>
          </instance-parameter>
          <parameter name="uri_list" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="DesktopItemLaunchFlags"
                  c:type="MateDesktopItemLaunchFlags"/>
          </parameter>
          <parameter name="envp" transfer-ownership="none">
            <type name="utf8" c:type="char**"/>
          </parameter>
        </parameters>
      </method>
      <method name="exists" c:identifier="mate_desktop_item_exists">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="const MateDesktopItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_attr_locale"
              c:identifier="mate_desktop_item_get_attr_locale">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="const MateDesktopItem*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_boolean" c:identifier="mate_desktop_item_get_boolean">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="const MateDesktopItem*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_entry_type"
              c:identifier="mate_desktop_item_get_entry_type">
        <return-value transfer-ownership="none">
          <type name="DesktopItemType" c:type="MateDesktopItemType"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="const MateDesktopItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_file_status"
              c:identifier="mate_desktop_item_get_file_status">
        <return-value transfer-ownership="none">
          <type name="DesktopItemStatus" c:type="MateDesktopItemStatus"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="const MateDesktopItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon" c:identifier="mate_desktop_item_get_icon">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="const MateDesktopItem*"/>
          </instance-parameter>
          <parameter name="icon_theme" transfer-ownership="none">
            <type name="Gtk.IconTheme" c:type="GtkIconTheme*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_languages"
              c:identifier="mate_desktop_item_get_languages"
              introspectable="0">
        <return-value>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="const MateDesktopItem*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_localestring"
              c:identifier="mate_desktop_item_get_localestring">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="const MateDesktopItem*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_localestring_lang"
              c:identifier="mate_desktop_item_get_localestring_lang">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="const MateDesktopItem*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="language" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_location"
              c:identifier="mate_desktop_item_get_location">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="const MateDesktopItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_string" c:identifier="mate_desktop_item_get_string">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="const MateDesktopItem*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_strings"
              c:identifier="mate_desktop_item_get_strings"
              introspectable="0">
        <return-value>
          <array c:type="char**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="const MateDesktopItem*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="launch"
              c:identifier="mate_desktop_item_launch"
              introspectable="0"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="const MateDesktopItem*"/>
          </instance-parameter>
          <parameter name="file_list" transfer-ownership="none">
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="DesktopItemLaunchFlags"
                  c:type="MateDesktopItemLaunchFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="launch_on_screen"
              c:identifier="mate_desktop_item_launch_on_screen"
              introspectable="0"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="const MateDesktopItem*"/>
          </instance-parameter>
          <parameter name="file_list" transfer-ownership="none">
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="DesktopItemLaunchFlags"
                  c:type="MateDesktopItemLaunchFlags"/>
          </parameter>
          <parameter name="screen" transfer-ownership="none">
            <type name="Gdk.Screen" c:type="GdkScreen*"/>
          </parameter>
          <parameter name="workspace" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="launch_with_env"
              c:identifier="mate_desktop_item_launch_with_env"
              introspectable="0"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="const MateDesktopItem*"/>
          </instance-parameter>
          <parameter name="file_list" transfer-ownership="none">
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="DesktopItemLaunchFlags"
                  c:type="MateDesktopItemLaunchFlags"/>
          </parameter>
          <parameter name="envp" transfer-ownership="none">
            <type name="utf8" c:type="char**"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="mate_desktop_item_ref">
        <return-value transfer-ownership="full">
          <type name="DesktopItem" c:type="MateDesktopItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="MateDesktopItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save" c:identifier="mate_desktop_item_save" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="MateDesktopItem*"/>
          </instance-parameter>
          <parameter name="under" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="force" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_boolean" c:identifier="mate_desktop_item_set_boolean">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="MateDesktopItem*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_entry_type"
              c:identifier="mate_desktop_item_set_entry_type">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="MateDesktopItem*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="DesktopItemType" c:type="MateDesktopItemType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_launch_time"
              c:identifier="mate_desktop_item_set_launch_time">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="MateDesktopItem*"/>
          </instance-parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_localestring"
              c:identifier="mate_desktop_item_set_localestring">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="MateDesktopItem*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_localestring_lang"
              c:identifier="mate_desktop_item_set_localestring_lang">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="MateDesktopItem*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="language" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_location"
              c:identifier="mate_desktop_item_set_location">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="MateDesktopItem*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_location_file"
              c:identifier="mate_desktop_item_set_location_file">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="MateDesktopItem*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_string" c:identifier="mate_desktop_item_set_string">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="MateDesktopItem*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_strings" c:identifier="mate_desktop_item_set_strings">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="MateDesktopItem*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="strings" transfer-ownership="none">
            <type name="utf8" c:type="char**"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="mate_desktop_item_unref">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="DesktopItem" c:type="MateDesktopItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="error_quark"
                c:identifier="mate_desktop_item_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="find_icon" c:identifier="mate_desktop_item_find_icon">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="icon_theme" transfer-ownership="none">
            <type name="Gtk.IconTheme" c:type="GtkIconTheme*"/>
          </parameter>
          <parameter name="icon" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="desired_size" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="DesktopItemError"
                 c:type="MateDesktopItemError"
                 glib:error-domain="mate-desktop-item-error-quark">
      <member name="no_filename"
              value="0"
              c:identifier="MATE_DESKTOP_ITEM_ERROR_NO_FILENAME">
      </member>
      <member name="unknown_encoding"
              value="1"
              c:identifier="MATE_DESKTOP_ITEM_ERROR_UNKNOWN_ENCODING">
      </member>
      <member name="cannot_open"
              value="2"
              c:identifier="MATE_DESKTOP_ITEM_ERROR_CANNOT_OPEN">
      </member>
      <member name="no_exec_string"
              value="3"
              c:identifier="MATE_DESKTOP_ITEM_ERROR_NO_EXEC_STRING">
      </member>
      <member name="bad_exec_string"
              value="4"
              c:identifier="MATE_DESKTOP_ITEM_ERROR_BAD_EXEC_STRING">
      </member>
      <member name="no_url"
              value="5"
              c:identifier="MATE_DESKTOP_ITEM_ERROR_NO_URL">
      </member>
      <member name="not_launchable"
              value="6"
              c:identifier="MATE_DESKTOP_ITEM_ERROR_NOT_LAUNCHABLE">
      </member>
      <member name="invalid_type"
              value="7"
              c:identifier="MATE_DESKTOP_ITEM_ERROR_INVALID_TYPE">
      </member>
    </enumeration>
    <bitfield name="DesktopItemIconFlags" c:type="MateDesktopItemIconFlags">
      <member name="desktop_item_icon_no_kde"
              value="1"
              c:identifier="MATE_DESKTOP_ITEM_ICON_NO_KDE">
      </member>
    </bitfield>
    <bitfield name="DesktopItemLaunchFlags"
              c:type="MateDesktopItemLaunchFlags">
      <member name="only_one"
              value="1"
              c:identifier="MATE_DESKTOP_ITEM_LAUNCH_ONLY_ONE">
      </member>
      <member name="use_current_dir"
              value="2"
              c:identifier="MATE_DESKTOP_ITEM_LAUNCH_USE_CURRENT_DIR">
      </member>
      <member name="append_uris"
              value="4"
              c:identifier="MATE_DESKTOP_ITEM_LAUNCH_APPEND_URIS">
      </member>
      <member name="append_paths"
              value="8"
              c:identifier="MATE_DESKTOP_ITEM_LAUNCH_APPEND_PATHS">
      </member>
      <member name="do_not_reap_child"
              value="16"
              c:identifier="MATE_DESKTOP_ITEM_LAUNCH_DO_NOT_REAP_CHILD">
      </member>
    </bitfield>
    <bitfield name="DesktopItemLoadFlags" c:type="MateDesktopItemLoadFlags">
      <member name="only_if_exists"
              value="1"
              c:identifier="MATE_DESKTOP_ITEM_LOAD_ONLY_IF_EXISTS">
      </member>
      <member name="no_translations"
              value="2"
              c:identifier="MATE_DESKTOP_ITEM_LOAD_NO_TRANSLATIONS">
      </member>
    </bitfield>
    <enumeration name="DesktopItemStatus" c:type="MateDesktopItemStatus">
      <member name="unchanged"
              value="0"
              c:identifier="MATE_DESKTOP_ITEM_UNCHANGED">
      </member>
      <member name="changed"
              value="1"
              c:identifier="MATE_DESKTOP_ITEM_CHANGED">
      </member>
      <member name="disappeared"
              value="2"
              c:identifier="MATE_DESKTOP_ITEM_DISAPPEARED">
      </member>
    </enumeration>
    <enumeration name="DesktopItemType" c:type="MateDesktopItemType">
      <member name="null" value="0" c:identifier="MATE_DESKTOP_ITEM_TYPE_NULL">
      </member>
      <member name="other"
              value="1"
              c:identifier="MATE_DESKTOP_ITEM_TYPE_OTHER">
      </member>
      <member name="application"
              value="2"
              c:identifier="MATE_DESKTOP_ITEM_TYPE_APPLICATION">
      </member>
      <member name="link" value="3" c:identifier="MATE_DESKTOP_ITEM_TYPE_LINK">
      </member>
      <member name="fsdevice"
              value="4"
              c:identifier="MATE_DESKTOP_ITEM_TYPE_FSDEVICE">
      </member>
      <member name="mime_type"
              value="5"
              c:identifier="MATE_DESKTOP_ITEM_TYPE_MIME_TYPE">
      </member>
      <member name="directory"
              value="6"
              c:identifier="MATE_DESKTOP_ITEM_TYPE_DIRECTORY">
      </member>
      <member name="service"
              value="7"
              c:identifier="MATE_DESKTOP_ITEM_TYPE_SERVICE">
      </member>
      <member name="service_type"
              value="8"
              c:identifier="MATE_DESKTOP_ITEM_TYPE_SERVICE_TYPE">
      </member>
    </enumeration>
    <class name="DesktopThumbnailFactory"
           c:symbol-prefix="desktop_thumbnail_factory"
           c:type="MateDesktopThumbnailFactory"
           parent="GObject.Object"
           glib:type-name="MateDesktopThumbnailFactory"
           glib:get-type="mate_desktop_thumbnail_factory_get_type"
           glib:type-struct="DesktopThumbnailFactoryClass">
      <constructor name="new"
                   c:identifier="mate_desktop_thumbnail_factory_new"
                   version="2.2">
        <doc xml:space="preserve">Creates a new #MateDesktopThumbnailFactory.

This function must be called on the main thread.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #MateDesktopThumbnailFactory</doc>
          <type name="DesktopThumbnailFactory"
                c:type="MateDesktopThumbnailFactory*"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">The thumbnail size to use</doc>
            <type name="DesktopThumbnailSize"
                  c:type="MateDesktopThumbnailSize"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="can_thumbnail"
              c:identifier="mate_desktop_thumbnail_factory_can_thumbnail"
              version="2.2">
        <doc xml:space="preserve">Returns TRUE if this MateIconFactory can (at least try) to thumbnail
this file. Thumbnails or files with failed thumbnails won't be thumbnailed.

Usage of this function is threadsafe.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the file can be thumbnailed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve">a #MateDesktopThumbnailFactory</doc>
            <type name="DesktopThumbnailFactory"
                  c:type="MateDesktopThumbnailFactory*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">the uri of a file</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:space="preserve">the mime type of the file</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="mtime" transfer-ownership="none">
            <doc xml:space="preserve">the mtime of the file</doc>
            <type name="glong" c:type="time_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_failed_thumbnail"
              c:identifier="mate_desktop_thumbnail_factory_create_failed_thumbnail"
              version="2.2">
        <doc xml:space="preserve">Creates a failed thumbnail for the file so that we don't try
to re-thumbnail the file later.

Usage of this function is threadsafe.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve">a #MateDesktopThumbnailFactory</doc>
            <type name="DesktopThumbnailFactory"
                  c:type="MateDesktopThumbnailFactory*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">the uri of a file</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="mtime" transfer-ownership="none">
            <doc xml:space="preserve">the modification time of the file</doc>
            <type name="glong" c:type="time_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="generate_thumbnail"
              c:identifier="mate_desktop_thumbnail_factory_generate_thumbnail"
              version="2.2">
        <doc xml:space="preserve">Tries to generate a thumbnail for the specified file. If it succeeds
it returns a pixbuf that can be used as a thumbnail.

Usage of this function is threadsafe.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">thumbnail pixbuf if thumbnailing succeeded, %NULL otherwise.</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve">a #MateDesktopThumbnailFactory</doc>
            <type name="DesktopThumbnailFactory"
                  c:type="MateDesktopThumbnailFactory*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">the uri of a file</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:space="preserve">the mime type of the file</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_valid_failed_thumbnail"
              c:identifier="mate_desktop_thumbnail_factory_has_valid_failed_thumbnail"
              version="2.2">
        <doc xml:space="preserve">Tries to locate an failed thumbnail for the file specified. Writing
and looking for failed thumbnails is important to avoid to try to
thumbnail e.g. broken images several times.

Usage of this function is threadsafe.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if there is a failed thumbnail for the file.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve">a #MateDesktopThumbnailFactory</doc>
            <type name="DesktopThumbnailFactory"
                  c:type="MateDesktopThumbnailFactory*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">the uri of a file</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="mtime" transfer-ownership="none">
            <doc xml:space="preserve">the mtime of the file</doc>
            <type name="glong" c:type="time_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup"
              c:identifier="mate_desktop_thumbnail_factory_lookup"
              version="2.2">
        <doc xml:space="preserve">Tries to locate an existing thumbnail for the file specified.

Usage of this function is threadsafe.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The absolute path of the thumbnail, or %NULL if none exist.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve">a #MateDesktopThumbnailFactory</doc>
            <type name="DesktopThumbnailFactory"
                  c:type="MateDesktopThumbnailFactory*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">the uri of a file</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="mtime" transfer-ownership="none">
            <doc xml:space="preserve">the mtime of the file</doc>
            <type name="glong" c:type="time_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_thumbnail"
              c:identifier="mate_desktop_thumbnail_factory_save_thumbnail"
              version="2.2">
        <doc xml:space="preserve">Saves @thumbnail at the right place. If the save fails a
failed thumbnail is written.

Usage of this function is threadsafe.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve">a #MateDesktopThumbnailFactory</doc>
            <type name="DesktopThumbnailFactory"
                  c:type="MateDesktopThumbnailFactory*"/>
          </instance-parameter>
          <parameter name="thumbnail" transfer-ownership="none">
            <doc xml:space="preserve">the thumbnail as a pixbuf</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">the uri of a file</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="original_mtime" transfer-ownership="none">
            <doc xml:space="preserve">the modification time of the original file</doc>
            <type name="glong" c:type="time_t"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="DesktopThumbnailFactoryPrivate"
              c:type="MateDesktopThumbnailFactoryPrivate*"/>
      </field>
    </class>
    <record name="DesktopThumbnailFactoryClass"
            c:type="MateDesktopThumbnailFactoryClass"
            glib:is-gtype-struct-for="DesktopThumbnailFactory">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="DesktopThumbnailFactoryPrivate"
            c:type="MateDesktopThumbnailFactoryPrivate"
            disguised="1">
    </record>
    <enumeration name="DesktopThumbnailSize" c:type="MateDesktopThumbnailSize">
      <member name="normal"
              value="0"
              c:identifier="MATE_DESKTOP_THUMBNAIL_SIZE_NORMAL">
      </member>
      <member name="large"
              value="1"
              c:identifier="MATE_DESKTOP_THUMBNAIL_SIZE_LARGE">
      </member>
    </enumeration>
    <class name="RRConfig"
           c:symbol-prefix="rr_config"
           c:type="MateRRConfig"
           parent="GObject.Object"
           glib:type-name="MateRRConfig"
           glib:get-type="mate_rr_config_get_type"
           glib:type-struct="RRConfigClass">
      <constructor name="new_current"
                   c:identifier="mate_rr_config_new_current"
                   throws="1">
        <return-value transfer-ownership="full">
          <type name="RRConfig" c:type="MateRRConfig*"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="MateRRScreen*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_stored"
                   c:identifier="mate_rr_config_new_stored"
                   throws="1">
        <return-value transfer-ownership="full">
          <type name="RRConfig" c:type="MateRRConfig*"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="MateRRScreen*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="apply_from_filename_with_time"
                c:identifier="mate_rr_config_apply_from_filename_with_time"
                throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="MateRRScreen*"/>
          </parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_backup_filename"
                c:identifier="mate_rr_config_get_backup_filename">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </function>
      <function name="get_intended_filename"
                c:identifier="mate_rr_config_get_intended_filename">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </function>
      <method name="applicable"
              c:identifier="mate_rr_config_applicable"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="configuration" transfer-ownership="none">
            <type name="RRConfig" c:type="MateRRConfig*"/>
          </instance-parameter>
          <parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="MateRRScreen*"/>
          </parameter>
        </parameters>
      </method>
      <method name="apply_with_time"
              c:identifier="mate_rr_config_apply_with_time"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="configuration" transfer-ownership="none">
            <type name="RRConfig" c:type="MateRRConfig*"/>
          </instance-parameter>
          <parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="MateRRScreen*"/>
          </parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="ensure_primary"
              c:identifier="mate_rr_config_ensure_primary">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="configuration" transfer-ownership="none">
            <type name="RRConfig" c:type="MateRRConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="mate_rr_config_equal">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config1" transfer-ownership="none">
            <type name="RRConfig" c:type="MateRRConfig*"/>
          </instance-parameter>
          <parameter name="config2" transfer-ownership="none">
            <type name="RRConfig" c:type="MateRRConfig*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_clone" c:identifier="mate_rr_config_get_clone">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether at least two outputs are at (0, 0) offset and they
have the same width/height.  Those outputs are of course connected and on
(i.e. they have a CRTC assigned).</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="configuration" transfer-ownership="none">
            <type name="RRConfig" c:type="MateRRConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_outputs" c:identifier="mate_rr_config_get_outputs">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the output configuration for this #MateRRConfig</doc>
          <array c:type="MateRROutputInfo**">
            <type name="RROutputInfo"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="configuration" transfer-ownership="none">
            <type name="RRConfig" c:type="MateRRConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_current"
              c:identifier="mate_rr_config_load_current"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RRConfig" c:type="MateRRConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_filename"
              c:identifier="mate_rr_config_load_filename"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RRConfig" c:type="MateRRConfig*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="match" c:identifier="mate_rr_config_match">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config1" transfer-ownership="none">
            <type name="RRConfig" c:type="MateRRConfig*"/>
          </instance-parameter>
          <parameter name="config2" transfer-ownership="none">
            <type name="RRConfig" c:type="MateRRConfig*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sanitize" c:identifier="mate_rr_config_sanitize">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="configuration" transfer-ownership="none">
            <type name="RRConfig" c:type="MateRRConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save" c:identifier="mate_rr_config_save" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="configuration" transfer-ownership="none">
            <type name="RRConfig" c:type="MateRRConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_clone" c:identifier="mate_rr_config_set_clone">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="configuration" transfer-ownership="none">
            <type name="RRConfig" c:type="MateRRConfig*"/>
          </instance-parameter>
          <parameter name="clone" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="screen"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="RRScreen"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RRConfigPrivate" c:type="MateRRConfigPrivate*"/>
      </field>
    </class>
    <record name="RRConfigClass"
            c:type="MateRRConfigClass"
            glib:is-gtype-struct-for="RRConfig">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="RRConfigPrivate" c:type="MateRRConfigPrivate" disguised="1">
    </record>
    <record name="RRCrtc"
            c:type="MateRRCrtc"
            glib:type-name="MateRRCrtc"
            glib:get-type="mate_rr_crtc_get_type"
            c:symbol-prefix="rr_crtc">
      <method name="can_drive_output"
              c:identifier="mate_rr_crtc_can_drive_output">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="crtc" transfer-ownership="none">
            <type name="RRCrtc" c:type="MateRRCrtc*"/>
          </instance-parameter>
          <parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="MateRROutput*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_current_mode"
              c:identifier="mate_rr_crtc_get_current_mode">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the current mode of this crtc</doc>
          <type name="RRMode" c:type="MateRRMode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="crtc" transfer-ownership="none">
            <doc xml:space="preserve">a #MateRRCrtc</doc>
            <type name="RRCrtc" c:type="MateRRCrtc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_rotation"
              c:identifier="mate_rr_crtc_get_current_rotation">
        <return-value transfer-ownership="none">
          <type name="RRRotation" c:type="MateRRRotation"/>
        </return-value>
        <parameters>
          <instance-parameter name="crtc" transfer-ownership="none">
            <type name="RRCrtc" c:type="MateRRCrtc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gamma" c:identifier="mate_rr_crtc_get_gamma">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE for success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="crtc" transfer-ownership="none">
            <doc xml:space="preserve">a #MateRRCrtc</doc>
            <type name="RRCrtc" c:type="MateRRCrtc*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="red"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the minimum width</doc>
            <type name="gushort" c:type="unsigned short**"/>
          </parameter>
          <parameter name="green"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the maximum width</doc>
            <type name="gushort" c:type="unsigned short**"/>
          </parameter>
          <parameter name="blue"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the minimum height</doc>
            <type name="gushort" c:type="unsigned short**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="mate_rr_crtc_get_id">
        <return-value transfer-ownership="none">
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="crtc" transfer-ownership="none">
            <type name="RRCrtc" c:type="MateRRCrtc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_position" c:identifier="mate_rr_crtc_get_position">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="crtc" transfer-ownership="none">
            <doc xml:space="preserve">a #MateRRCrtc</doc>
            <type name="RRCrtc" c:type="MateRRCrtc*"/>
          </instance-parameter>
          <parameter name="x"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_rotations" c:identifier="mate_rr_crtc_get_rotations">
        <return-value transfer-ownership="none">
          <type name="RRRotation" c:type="MateRRRotation"/>
        </return-value>
        <parameters>
          <instance-parameter name="crtc" transfer-ownership="none">
            <type name="RRCrtc" c:type="MateRRCrtc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_config"
              c:identifier="mate_rr_crtc_set_config"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="crtc" transfer-ownership="none">
            <type name="RRCrtc" c:type="MateRRCrtc*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="RRMode" c:type="MateRRMode*"/>
          </parameter>
          <parameter name="rotation" transfer-ownership="none">
            <type name="RRRotation" c:type="MateRRRotation"/>
          </parameter>
          <parameter name="outputs" transfer-ownership="none">
            <type name="RROutput" c:type="MateRROutput**"/>
          </parameter>
          <parameter name="n_outputs" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_config_with_time"
              c:identifier="mate_rr_crtc_set_config_with_time"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="crtc" transfer-ownership="none">
            <type name="RRCrtc" c:type="MateRRCrtc*"/>
          </instance-parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="RRMode" c:type="MateRRMode*"/>
          </parameter>
          <parameter name="rotation" transfer-ownership="none">
            <type name="RRRotation" c:type="MateRRRotation"/>
          </parameter>
          <parameter name="outputs" transfer-ownership="none">
            <type name="RROutput" c:type="MateRROutput**"/>
          </parameter>
          <parameter name="n_outputs" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_gamma" c:identifier="mate_rr_crtc_set_gamma">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="crtc" transfer-ownership="none">
            <type name="RRCrtc" c:type="MateRRCrtc*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="red" transfer-ownership="none">
            <type name="gushort" c:type="unsigned short*"/>
          </parameter>
          <parameter name="green" transfer-ownership="none">
            <type name="gushort" c:type="unsigned short*"/>
          </parameter>
          <parameter name="blue" transfer-ownership="none">
            <type name="gushort" c:type="unsigned short*"/>
          </parameter>
        </parameters>
      </method>
      <method name="supports_rotation"
              c:identifier="mate_rr_crtc_supports_rotation">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="crtc" transfer-ownership="none">
            <type name="RRCrtc" c:type="MateRRCrtc*"/>
          </instance-parameter>
          <parameter name="rotation" transfer-ownership="none">
            <type name="RRRotation" c:type="MateRRRotation"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="RRError"
                 c:type="MateRRError"
                 glib:error-domain="mate-rr-error-quark">
      <member name="unknown" value="0" c:identifier="MATE_RR_ERROR_UNKNOWN">
      </member>
      <member name="no_randr_extension"
              value="1"
              c:identifier="MATE_RR_ERROR_NO_RANDR_EXTENSION">
      </member>
      <member name="randr_error"
              value="2"
              c:identifier="MATE_RR_ERROR_RANDR_ERROR">
      </member>
      <member name="bounds_error"
              value="3"
              c:identifier="MATE_RR_ERROR_BOUNDS_ERROR">
      </member>
      <member name="crtc_assignment"
              value="4"
              c:identifier="MATE_RR_ERROR_CRTC_ASSIGNMENT">
      </member>
      <member name="no_matching_config"
              value="5"
              c:identifier="MATE_RR_ERROR_NO_MATCHING_CONFIG">
      </member>
    </enumeration>
    <class name="RRLabeler"
           c:symbol-prefix="rr_labeler"
           c:type="MateRRLabeler"
           parent="GObject.Object"
           glib:type-name="MateRRLabeler"
           glib:get-type="mate_rr_labeler_get_type"
           glib:type-struct="RRLabelerClass">
      <constructor name="new" c:identifier="mate_rr_labeler_new">
        <doc xml:space="preserve">Create a GUI element that will display colored labels on each connected monitor.
This is useful when users are required to identify which monitor is which, e.g. for
for configuring multiple monitors.
The labels will be shown by default, use mate_rr_labeler_hide to hide them.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #MateRRLabeler</doc>
          <type name="RRLabeler" c:type="MateRRLabeler*"/>
        </return-value>
        <parameters>
          <parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">Configuration of the screens to label</doc>
            <type name="RRConfig" c:type="MateRRConfig*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_rgba_for_output"
              c:identifier="mate_rr_labeler_get_rgba_for_output">
        <doc xml:space="preserve">Get the color used for the label on a given output (monitor).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="labeler" transfer-ownership="none">
            <doc xml:space="preserve">A #MateRRLabeler</doc>
            <type name="RRLabeler" c:type="MateRRLabeler*"/>
          </instance-parameter>
          <parameter name="output" transfer-ownership="none">
            <doc xml:space="preserve">Output device (i.e. monitor) to query</doc>
            <type name="RROutputInfo" c:type="MateRROutputInfo*"/>
          </parameter>
          <parameter name="color_out" transfer-ownership="none">
            <type name="Gdk.RGBA" c:type="GdkRGBA*"/>
          </parameter>
        </parameters>
      </method>
      <method name="hide" c:identifier="mate_rr_labeler_hide">
        <doc xml:space="preserve">Hide ouput labels.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="labeler" transfer-ownership="none">
            <doc xml:space="preserve">A #MateRRLabeler</doc>
            <type name="RRLabeler" c:type="MateRRLabeler*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="config"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="RRConfig"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RRLabelerPrivate" c:type="MateRRLabelerPrivate*"/>
      </field>
    </class>
    <record name="RRLabelerClass"
            c:type="MateRRLabelerClass"
            glib:is-gtype-struct-for="RRLabeler">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="RRLabelerPrivate"
            c:type="MateRRLabelerPrivate"
            disguised="1">
    </record>
    <record name="RRMode"
            c:type="MateRRMode"
            glib:type-name="MateRRMode"
            glib:get-type="mate_rr_mode_get_type"
            c:symbol-prefix="rr_mode">
      <method name="get_freq" c:identifier="mate_rr_mode_get_freq">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="mode" transfer-ownership="none">
            <type name="RRMode" c:type="MateRRMode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_height" c:identifier="mate_rr_mode_get_height">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="mode" transfer-ownership="none">
            <type name="RRMode" c:type="MateRRMode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="mate_rr_mode_get_id">
        <return-value transfer-ownership="none">
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="mode" transfer-ownership="none">
            <type name="RRMode" c:type="MateRRMode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_width" c:identifier="mate_rr_mode_get_width">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="mode" transfer-ownership="none">
            <type name="RRMode" c:type="MateRRMode*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="RROutput"
            c:type="MateRROutput"
            glib:type-name="MateRROutput"
            glib:get-type="mate_rr_output_get_type"
            c:symbol-prefix="rr_output">
      <method name="can_clone" c:identifier="mate_rr_output_can_clone">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="MateRROutput*"/>
          </instance-parameter>
          <parameter name="clone" transfer-ownership="none">
            <type name="RROutput" c:type="MateRROutput*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connector_type"
              c:identifier="mate_rr_output_get_connector_type">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="MateRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_crtc" c:identifier="mate_rr_output_get_crtc">
        <return-value transfer-ownership="none">
          <type name="RRCrtc" c:type="MateRRCrtc*"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <doc xml:space="preserve">a #MateRROutput</doc>
            <type name="RROutput" c:type="MateRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_mode"
              c:identifier="mate_rr_output_get_current_mode">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the current mode of this output</doc>
          <type name="RRMode" c:type="MateRRMode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <doc xml:space="preserve">a #MateRROutput</doc>
            <type name="RROutput" c:type="MateRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_edid_data" c:identifier="mate_rr_output_get_edid_data">
        <return-value transfer-ownership="none">
          <type name="guint8" c:type="const guint8*"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="MateRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_height_mm" c:identifier="mate_rr_output_get_height_mm">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="MateRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="mate_rr_output_get_id">
        <return-value transfer-ownership="none">
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="MateRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_primary"
              c:identifier="mate_rr_output_get_is_primary">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="MateRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="mate_rr_output_get_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="MateRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_position" c:identifier="mate_rr_output_get_position">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <doc xml:space="preserve">a #MateRROutput</doc>
            <type name="RROutput" c:type="MateRROutput*"/>
          </instance-parameter>
          <parameter name="x"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_possible_crtcs"
              c:identifier="mate_rr_output_get_possible_crtcs">
        <return-value transfer-ownership="none">
          <array c:type="MateRRCrtc**">
            <type name="RRCrtc" c:type="MateRRCrtc*"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <doc xml:space="preserve">a #MateRROutput</doc>
            <type name="RROutput" c:type="MateRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_preferred_mode"
              c:identifier="mate_rr_output_get_preferred_mode">
        <return-value transfer-ownership="none">
          <type name="RRMode" c:type="MateRRMode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <doc xml:space="preserve">a #MateRROutput</doc>
            <type name="RROutput" c:type="MateRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size_inches"
              c:identifier="mate_rr_output_get_size_inches">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="MateRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_width_mm" c:identifier="mate_rr_output_get_width_mm">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="outout" transfer-ownership="none">
            <type name="RROutput" c:type="MateRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_connected" c:identifier="mate_rr_output_is_connected">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="MateRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_laptop" c:identifier="mate_rr_output_is_laptop">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="MateRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_modes" c:identifier="mate_rr_output_list_modes">
        <return-value transfer-ownership="none">
          <array c:type="MateRRMode**">
            <type name="RRMode" c:type="MateRRMode*"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <doc xml:space="preserve">a #MateRROutput</doc>
            <type name="RROutput" c:type="MateRROutput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="supports_mode" c:identifier="mate_rr_output_supports_mode">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="MateRROutput*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="RRMode" c:type="MateRRMode*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <class name="RROutputInfo"
           c:symbol-prefix="rr_output_info"
           c:type="MateRROutputInfo"
           parent="GObject.Object"
           glib:type-name="MateRROutputInfo"
           glib:get-type="mate_rr_output_info_get_type"
           glib:type-struct="RROutputInfoClass">
      <method name="get_aspect_ratio"
              c:identifier="mate_rr_output_info_get_aspect_ratio">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="MateRROutputInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display_name"
              c:identifier="mate_rr_output_info_get_display_name">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the display name of this output</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="MateRROutputInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_geometry"
              c:identifier="mate_rr_output_info_get_geometry">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #MateRROutputInfo</doc>
            <type name="RROutputInfo" c:type="MateRROutputInfo*"/>
          </instance-parameter>
          <parameter name="x"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="mate_rr_output_info_get_name">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the output name</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="MateRROutputInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_preferred_height"
              c:identifier="mate_rr_output_info_get_preferred_height">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="MateRROutputInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_preferred_width"
              c:identifier="mate_rr_output_info_get_preferred_width">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="MateRROutputInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_primary"
              c:identifier="mate_rr_output_info_get_primary">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="MateRROutputInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_product"
              c:identifier="mate_rr_output_info_get_product">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="MateRROutputInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_refresh_rate"
              c:identifier="mate_rr_output_info_get_refresh_rate">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="MateRROutputInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rotation"
              c:identifier="mate_rr_output_info_get_rotation">
        <return-value transfer-ownership="none">
          <type name="RRRotation" c:type="MateRRRotation"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="MateRROutputInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_serial" c:identifier="mate_rr_output_info_get_serial">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="MateRROutputInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vendor" c:identifier="mate_rr_output_info_get_vendor">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #MateRROutputInfo</doc>
            <type name="RROutputInfo" c:type="MateRROutputInfo*"/>
          </instance-parameter>
          <parameter name="vendor"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <array zero-terminated="0" c:type="gchar*" fixed-size="4">
              <type name="utf8" c:type="gchar"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="is_active" c:identifier="mate_rr_output_info_is_active">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether there is a CRTC assigned to this output (i.e. a signal is being sent to it)</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="MateRROutputInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_connected"
              c:identifier="mate_rr_output_info_is_connected">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the output is physically connected to a monitor</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="MateRROutputInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_active" c:identifier="mate_rr_output_info_set_active">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="MateRROutputInfo*"/>
          </instance-parameter>
          <parameter name="active" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_geometry"
              c:identifier="mate_rr_output_info_set_geometry">
        <doc xml:space="preserve">Set the geometry for the monitor connected to the specified output.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">a #MateRROutputInfo</doc>
            <type name="RROutputInfo" c:type="MateRROutputInfo*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve">x offset for monitor</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve">y offset for monitor</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve">monitor width</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve">monitor height</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_primary"
              c:identifier="mate_rr_output_info_set_primary">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="MateRROutputInfo*"/>
          </instance-parameter>
          <parameter name="primary" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_refresh_rate"
              c:identifier="mate_rr_output_info_set_refresh_rate">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="MateRROutputInfo*"/>
          </instance-parameter>
          <parameter name="rate" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rotation"
              c:identifier="mate_rr_output_info_set_rotation">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RROutputInfo" c:type="MateRROutputInfo*"/>
          </instance-parameter>
          <parameter name="rotation" transfer-ownership="none">
            <type name="RRRotation" c:type="MateRRRotation"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RROutputInfoPrivate" c:type="MateRROutputInfoPrivate*"/>
      </field>
    </class>
    <record name="RROutputInfoClass"
            c:type="MateRROutputInfoClass"
            glib:is-gtype-struct-for="RROutputInfo">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="RROutputInfoPrivate"
            c:type="MateRROutputInfoPrivate"
            disguised="1">
    </record>
    <bitfield name="RRRotation" c:type="MateRRRotation">
      <member name="rotation_0" value="1" c:identifier="MATE_RR_ROTATION_0">
      </member>
      <member name="rotation_90" value="2" c:identifier="MATE_RR_ROTATION_90">
      </member>
      <member name="rotation_180"
              value="4"
              c:identifier="MATE_RR_ROTATION_180">
      </member>
      <member name="rotation_270"
              value="8"
              c:identifier="MATE_RR_ROTATION_270">
      </member>
      <member name="reflect_x" value="16" c:identifier="MATE_RR_REFLECT_X">
      </member>
      <member name="reflect_y" value="32" c:identifier="MATE_RR_REFLECT_Y">
      </member>
    </bitfield>
    <class name="RRScreen"
           c:symbol-prefix="rr_screen"
           c:type="MateRRScreen"
           parent="GObject.Object"
           glib:type-name="MateRRScreen"
           glib:get-type="mate_rr_screen_get_type"
           glib:type-struct="RRScreenClass">
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="mate_rr_screen_new" throws="1">
        <doc xml:space="preserve">Creates a new #MateRRScreen instance</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #MateRRScreen instance or NULL if screen could not be created,
for instance if the driver does not support Xrandr 1.2</doc>
          <type name="RRScreen" c:type="MateRRScreen*"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">the #GdkScreen on which to operate</doc>
            <type name="Gdk.Screen" c:type="GdkScreen*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_crtc_by_id"
              c:identifier="mate_rr_screen_get_crtc_by_id">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the CRTC identified by @id</doc>
          <type name="RRCrtc" c:type="MateRRCrtc*"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="MateRRScreen*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_output_by_id"
              c:identifier="mate_rr_screen_get_output_by_id">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the output identified by @id</doc>
          <type name="RROutput" c:type="MateRROutput*"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="MateRRScreen*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_output_by_name"
              c:identifier="mate_rr_screen_get_output_by_name">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the output identified by @name</doc>
          <type name="RROutput" c:type="MateRROutput*"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="MateRRScreen*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_ranges" c:identifier="mate_rr_screen_get_ranges">
        <doc xml:space="preserve">Get the ranges of the screen</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #MateRRScreen</doc>
            <type name="RRScreen" c:type="MateRRScreen*"/>
          </instance-parameter>
          <parameter name="min_width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the minimum width</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="max_width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the maximum width</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="min_height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the minimum height</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="max_height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the maximum height</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_timestamps"
              c:identifier="mate_rr_screen_get_timestamps">
        <doc xml:space="preserve">Queries the two timestamps that the X RANDR extension maintains.  The X
server will prevent change requests for stale configurations, those whose
timestamp is not equal to that of the latest request for configuration.  The
X server will also prevent change requests that have an older timestamp to
the latest change request.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #MateRRScreen</doc>
            <type name="RRScreen" c:type="MateRRScreen*"/>
          </instance-parameter>
          <parameter name="change_timestamp_ret"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Location in which to store the timestamp at which the RANDR configuration was last changed</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
          <parameter name="config_timestamp_ret"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Location in which to store the timestamp at which the RANDR configuration was last obtained</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_clone_modes"
              c:identifier="mate_rr_screen_list_clone_modes">
        <doc xml:space="preserve">List available XRandR clone modes</doc>
        <return-value transfer-ownership="none">
          <array c:type="MateRRMode**">
            <type name="RRMode" c:type="MateRRMode*"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="MateRRScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_crtcs" c:identifier="mate_rr_screen_list_crtcs">
        <doc xml:space="preserve">List all CRTCs</doc>
        <return-value transfer-ownership="none">
          <array c:type="MateRRCrtc**">
            <type name="RRCrtc" c:type="MateRRCrtc*"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="MateRRScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_modes" c:identifier="mate_rr_screen_list_modes">
        <doc xml:space="preserve">List available XRandR modes</doc>
        <return-value transfer-ownership="none">
          <array c:type="MateRRMode**">
            <type name="RRMode" c:type="MateRRMode*"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="MateRRScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_outputs" c:identifier="mate_rr_screen_list_outputs">
        <doc xml:space="preserve">List all outputs</doc>
        <return-value transfer-ownership="none">
          <array c:type="MateRROutput**">
            <type name="RROutput" c:type="MateRROutput*"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="MateRRScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="refresh" c:identifier="mate_rr_screen_refresh" throws="1">
        <doc xml:space="preserve">Refreshes the screen configuration, and calls the screen's callback if it
exists and if the screen's configuration changed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if the screen's configuration changed; otherwise, the
function returns FALSE and a NULL error if the configuration didn't change,
or FALSE and a non-NULL error if there was an error while refreshing the
configuration.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve">a #MateRRScreen</doc>
            <type name="RRScreen" c:type="MateRRScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_primary_output"
              c:identifier="mate_rr_screen_set_primary_output">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="MateRRScreen*"/>
          </instance-parameter>
          <parameter name="output" transfer-ownership="none">
            <type name="RROutput" c:type="MateRROutput*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size" c:identifier="mate_rr_screen_set_size">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <type name="RRScreen" c:type="MateRRScreen*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="mm_width" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="mm_height" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <property name="gdk-screen"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gdk.Screen"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="RRScreenPrivate" c:type="MateRRScreenPrivate*"/>
      </field>
      <glib:signal name="changed" when="first" no-recurse="1" no-hooks="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="RRScreenClass"
            c:type="MateRRScreenClass"
            glib:is-gtype-struct-for="RRScreen">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="changed">
        <callback name="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="RRScreenPrivate" c:type="MateRRScreenPrivate" disguised="1">
    </record>
    <constant name="RR_CONNECTOR_TYPE_PANEL"
              value="Panel"
              c:type="MATE_RR_CONNECTOR_TYPE_PANEL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function name="dconf_list_subdirs"
              c:identifier="mate_dconf_list_subdirs"
              version="1.7.1"
              introspectable="0">
      <doc xml:space="preserve">Returns the list of subdirectories of the given dconf directory.</doc>
      <return-value>
        <doc xml:space="preserve">the list of subdirectories.</doc>
        <array c:type="gchar**">
          <type name="utf8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="dir" transfer-ownership="none">
          <doc xml:space="preserve">the dconf directory.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="remove_trailing_slash" transfer-ownership="none">
          <doc xml:space="preserve">whether to remove the trailing slash from
paths.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="dconf_recursive_reset"
              c:identifier="mate_dconf_recursive_reset"
              version="1.7.1"
              throws="1">
      <doc xml:space="preserve">Allow to reset a dconf path.</doc>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="dir" transfer-ownership="none">
          <doc xml:space="preserve">the dconf directory to reset.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="dconf_sync" c:identifier="mate_dconf_sync" version="1.7.1">
      <doc xml:space="preserve">Ensure dconf daemon syncs the written values.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="dconf_write_sync"
              c:identifier="mate_dconf_write_sync"
              version="1.7.1"
              throws="1">
      <doc xml:space="preserve">Allow to write a value to dconf.</doc>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve">the key to write.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">the value to write.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </parameter>
      </parameters>
    </function>
    <function name="desktop_gtk_style_get_dark_color"
              c:identifier="mate_desktop_gtk_style_get_dark_color">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="style" transfer-ownership="none">
          <type name="Gtk.StyleContext" c:type="GtkStyleContext*"/>
        </parameter>
        <parameter name="state" transfer-ownership="none">
          <type name="Gtk.StateFlags" c:type="GtkStateFlags"/>
        </parameter>
        <parameter name="color" transfer-ownership="none">
          <type name="Gdk.RGBA" c:type="GdkRGBA*"/>
        </parameter>
      </parameters>
    </function>
    <function name="desktop_gtk_style_get_light_color"
              c:identifier="mate_desktop_gtk_style_get_light_color">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="style" transfer-ownership="none">
          <type name="Gtk.StyleContext" c:type="GtkStyleContext*"/>
        </parameter>
        <parameter name="state" transfer-ownership="none">
          <type name="Gtk.StateFlags" c:type="GtkStateFlags"/>
        </parameter>
        <parameter name="color" transfer-ownership="none">
          <type name="Gdk.RGBA" c:type="GdkRGBA*"/>
        </parameter>
      </parameters>
    </function>
    <function name="desktop_item_error_quark"
              c:identifier="mate_desktop_item_error_quark"
              moved-to="DesktopItem.error_quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="desktop_item_find_icon"
              c:identifier="mate_desktop_item_find_icon"
              moved-to="DesktopItem.find_icon">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="icon_theme" transfer-ownership="none">
          <type name="Gtk.IconTheme" c:type="GtkIconTheme*"/>
        </parameter>
        <parameter name="icon" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="desired_size" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="desktop_prepend_terminal_to_vector"
              c:identifier="mate_desktop_prepend_terminal_to_vector">
      <doc xml:space="preserve">Prepends a terminal (either the one configured as default in the user's
MATE setup, or one of the common xterm emulators) to the passed in vector,
modifying it in the process.  The vector should be allocated with #g_malloc,
as this will #g_free the original vector.  Also all elements must have been
allocated separately.  That is the standard glib/MATE way of doing vectors
however.  If the integer that @argc points to is negative, the size will
first be computed.  Also note that passing in pointers to a vector that is
empty, will just create a new vector for you.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="argc" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to the vector size</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="argv" transfer-ownership="none">
          <doc xml:space="preserve">a pointer to the vector</doc>
          <type name="utf8" c:type="char***"/>
        </parameter>
      </parameters>
    </function>
    <function name="desktop_thumbnail_has_uri"
              c:identifier="mate_desktop_thumbnail_has_uri"
              version="2.2">
      <doc xml:space="preserve">Returns whether the thumbnail has the correct uri embedded in the
Thumb::URI option in the png.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE if the thumbnail is for @uri</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pixbuf" transfer-ownership="none">
          <doc xml:space="preserve">an loaded thumbnail pixbuf</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve">a uri</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="desktop_thumbnail_is_valid"
              c:identifier="mate_desktop_thumbnail_is_valid"
              version="2.2">
      <doc xml:space="preserve">Returns whether the thumbnail has the correct uri and mtime embedded in the
png options.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE if the thumbnail has the right @uri and @mtime</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pixbuf" transfer-ownership="none">
          <doc xml:space="preserve">an loaded thumbnail #GdkPixbuf</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve">a uri</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="mtime" transfer-ownership="none">
          <doc xml:space="preserve">the mtime</doc>
          <type name="glong" c:type="time_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="desktop_thumbnail_md5"
              c:identifier="mate_desktop_thumbnail_md5"
              version="2.2"
              deprecated="1"
              deprecated-version="2.22">
      <doc xml:space="preserve">Calculates the MD5 checksum of the uri. This can be useful
if you want to manually handle thumbnail files.</doc>
      <doc-deprecated xml:space="preserve">Use #GChecksum instead</doc-deprecated>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A string with the MD5 digest of the uri string.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve">an uri</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="desktop_thumbnail_path_for_uri"
              c:identifier="mate_desktop_thumbnail_path_for_uri"
              version="2.2">
      <doc xml:space="preserve">Returns the filename that a thumbnail of size @size for @uri would have.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">an absolute filename</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve">an uri</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <doc xml:space="preserve">a thumbnail size</doc>
          <type name="DesktopThumbnailSize" c:type="MateDesktopThumbnailSize"/>
        </parameter>
      </parameters>
    </function>
    <function name="desktop_thumbnail_scale_down_pixbuf"
              c:identifier="mate_desktop_thumbnail_scale_down_pixbuf"
              version="2.2">
      <doc xml:space="preserve">Scales the pixbuf to the desired size. This function
is a lot faster than gdk-pixbuf when scaling down by
large amounts.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a scaled pixbuf</doc>
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </return-value>
      <parameters>
        <parameter name="pixbuf" transfer-ownership="none">
          <doc xml:space="preserve">a #GdkPixbuf</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
        <parameter name="dest_width" transfer-ownership="none">
          <doc xml:space="preserve">the desired new width</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="dest_height" transfer-ownership="none">
          <doc xml:space="preserve">the desired new height</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="gdk_spawn_command_line_on_screen"
              c:identifier="mate_gdk_spawn_command_line_on_screen"
              version="1.7.1"
              throws="1">
      <doc xml:space="preserve">This is a replacement for gdk_spawn_command_line_on_screen, deprecated
in GDK 2.24 and removed in GDK 3.0.

gdk_spawn_command_line_on_screen is like g_spawn_command_line_async(),
except the child process is spawned in such an environment that on
calling gdk_display_open() it would be returned a GdkDisplay with
screen as the default screen.

This is useful for applications which wish to launch an application
on a specific screen.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE on success, FALSE if error is set.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="screen" transfer-ownership="none">
          <doc xml:space="preserve">a GdkScreen</doc>
          <type name="Gdk.Screen" c:type="GdkScreen*"/>
        </parameter>
        <parameter name="command" transfer-ownership="none">
          <doc xml:space="preserve">a command line</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gsettings_append_strv"
              c:identifier="mate_gsettings_append_strv">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="settings" transfer-ownership="none">
          <type name="Gio.Settings" c:type="GSettings*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gsettings_is_valid_keyname"
              c:identifier="mate_gsettings_is_valid_keyname"
              throws="1">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gsettings_remove_all_from_strv"
              c:identifier="mate_gsettings_remove_all_from_strv">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="settings" transfer-ownership="none">
          <type name="Gio.Settings" c:type="GSettings*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gsettings_schema_exists"
              c:identifier="mate_gsettings_schema_exists"
              version="1.7.1">
      <doc xml:space="preserve">Check if a given schema is installed in GSettings.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE if schema exists, FALSE if not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="schema" transfer-ownership="none">
          <doc xml:space="preserve">schema to check.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gsettings_strv_to_gslist"
              c:identifier="mate_gsettings_strv_to_gslist"
              introspectable="0">
      <return-value>
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="array" transfer-ownership="none">
          <type name="utf8" c:type="const gchar* const*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rr_error_quark" c:identifier="mate_rr_error_quark">
      <doc xml:space="preserve">Returns the #GQuark that will be used for #GError values returned by the
MateRR API.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">a #GQuark used to identify errors coming from the MateRR API.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="show_about_dialog"
              c:identifier="mate_show_about_dialog"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="parent" transfer-ownership="none">
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </parameter>
        <parameter name="first_property_name" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <varargs/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
